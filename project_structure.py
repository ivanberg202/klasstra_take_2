# Generated on 2025-01-20 13:12:42
project_structure = {
  "python_project/app/seed.py": # filename: python_project/app/seed.py\n'# filename: app/seed.py\nimport sys\nimport os\n\n# Add the project root to sys.path to allow imports from \'app\'\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nproject_root = os.path.abspath(os.path.join(current_dir, \'..\'))\nsys.path.insert(0, project_root)\n\nfrom app.core.database import SessionLocal\nfrom app.models.user import User\nfrom app.models.class_ import Class\nfrom app.models.child import Child\nfrom app.models.announcement import Announcement\nfrom app.models.teacher_class import TeacherClass  # Import TeacherClass model\nfrom app.core.security import hash_password\n\ndef seed():\n    db = SessionLocal()\n    try:\n        # Create an admin user if not exists\n        admin = db.query(User).filter(User.username == "admin").first()\n        if not admin:\n            admin = User(\n                username="admin",\n                first_name="Admin",\n                last_name="User",\n                email="admin@example.com",\n                password_hash=hash_password("AdminSecurePass123!"),\n                role="admin",\n            )\n            db.add(admin)\n            db.commit()\n            print("Admin user created: admin / AdminSecurePass123!")\n        else:\n            print("Admin user already exists.")\n\n        # Create a teacher user if not exists\n        teacher = db.query(User).filter(User.username == "teacher1").first()\n        if not teacher:\n            teacher = User(\n                username="teacher1",\n                first_name="John",\n                last_name="Doe",\n                email="john.doe@example.com",\n                password_hash=hash_password("TeacherPass123!"),\n                role="teacher",\n            )\n            db.add(teacher)\n            db.commit()\n            print("Teacher user created: teacher1 / TeacherPass123!")\n        else:\n            print("Teacher user already exists.")\n\n        # Create a parent user if not exists\n        parent = db.query(User).filter(User.username == "parent1").first()\n        if not parent:\n            parent = User(\n                username="parent1",\n                first_name="Jane",\n                last_name="Smith",\n                email="jane.smith@example.com",\n                password_hash=hash_password("ParentPass123!"),\n                role="parent",\n            )\n            db.add(parent)\n            db.commit()\n            print("Parent user created: parent1 / ParentPass123!")\n        else:\n            print("Parent user already exists.")\n\n        # Create sample classes if not exists\n        sample_classes = ["F1", "F2", "F3", "F4", "F5", "F6"]\n        class_objects = []\n        for class_name in sample_classes:\n            existing_class = db.query(Class).filter(Class.name == class_name).first()\n            if not existing_class:\n                cls = Class(name=class_name)\n                db.add(cls)\n                db.commit()\n                db.refresh(cls)\n                class_objects.append(cls)\n                print(f"Class \'{class_name}\' created.")\n            else:\n                class_objects.append(existing_class)\n                print(f"Class \'{class_name}\' already exists.")\n\n        # Retrieve parent and teacher users\n        parent_user = db.query(User).filter(User.username == "parent1").first()\n        teacher_user = db.query(User).filter(User.username == "teacher1").first()\n\n        # Assign teacher to specific classes (e.g., F1 and F2)\n        # Define the classes to assign the teacher to\n        classes_to_assign = ["F1", "F2"]\n        for cls in class_objects:\n            if cls.name in classes_to_assign:\n                # Check if the assignment already exists\n                existing_assignment = db.query(TeacherClass).filter(\n                    TeacherClass.teacher_id == teacher_user.id,\n                    TeacherClass.class_id == cls.id\n                ).first()\n                if not existing_assignment:\n                    assignment = TeacherClass(\n                        teacher_id=teacher_user.id,\n                        class_id=cls.id\n                    )\n                    db.add(assignment)\n                    db.commit()\n                    print(f"Assigned teacher1 to class \'{cls.name}\'.")\n                else:\n                    print(f"Teacher1 is already assigned to class \'{cls.name}\'.")\n\n        # Create children for the parent\n        existing_children = db.query(Child).filter(Child.parent_id == parent_user.id).all()\n        if not existing_children:\n            child1 = Child(\n                parent_id=parent_user.id,\n                first_name="Alice",\n                last_name="Smith",\n                class_id=class_objects[0].id,  # F1\n            )\n            child2 = Child(\n                parent_id=parent_user.id,\n                first_name="Bob",\n                last_name="Smith",\n                class_id=class_objects[1].id,  # F2\n            )\n            db.add_all([child1, child2])\n            db.commit()\n            print("Children Alice and Bob added for parent1.")\n        else:\n            print("Children already exist for parent1.")\n\n        # Create announcements from the teacher\n        # Corrected comparison using \'created_by_id\'\n        existing_announcements = db.query(Announcement).filter(\n            Announcement.created_by_id == teacher_user.id\n        ).all()\n        if not existing_announcements:\n            announcement1 = Announcement(\n                title="Welcome to F1!",\n                body="We will start with basic lessons next week.",\n                created_by_id=teacher_user.id,  # Use \'created_by_id\' instead of \'created_by\'\n                recipient_type="class",\n                recipient_id=class_objects[0].id,  # F1\n            )\n            announcement2 = Announcement(\n                title="F2 Activity Reminder",\n                body="Don\'t forget to prepare for the upcoming activity.",\n                created_by_id=teacher_user.id,  # Use \'created_by_id\' instead of \'created_by\'\n                recipient_type="class",\n                recipient_id=class_objects[1].id,  # F2\n            )\n            db.add_all([announcement1, announcement2])\n            db.commit()\n            print("Announcements created by teacher1.")\n        else:\n            print("Announcements already exist for teacher1.")\n\n    except Exception as e:\n        print(f"An error occurred during seeding: {e}")\n    finally:\n        db.close()\n\nif __name__ == "__main__":\n    seed()\n',
  "python_project/app/main.py": # filename: python_project/app/main.py\n'# filename: app/main.py\nfrom fastapi import FastAPI\nfrom app.routers import auth, users, classes, announcements, children, admin, teacher, upload, parents\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.core.database import Base, engine\nfrom sqlalchemy import text, inspect\nfrom app.seed import seed  # Import the seed function\n\n\napp = FastAPI(title="Klasstra")\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],  # Adjust this in production for security\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# Reset the database schema on startup\nwith engine.connect() as connection:\n    connection = connection.execution_options(isolation_level="AUTOCOMMIT")  # Enable autocommit mode\n\n    inspector = inspect(engine)\n    tables = inspector.get_table_names()\n\n    if tables:\n        print("Dropping all tables except \'alembic_version\'...")\n        for table in tables:\n            if table != "alembic_version":\n                connection.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))\n                print(f"Dropped table: {table}")\n        print("All applicable tables dropped.")\n    else:\n        print("No tables found. Skipping drop.")\n\n    print("Recreating tables...")\n    Base.metadata.create_all(engine)\n    print("Database tables created.")\n\n# Seed the database with sample data\nprint("Seeding the database with sample data...")\nseed()\nprint("Database seeding complete.")\n\n\n# Include API routers\napp.include_router(auth.router)\napp.include_router(users.router)\napp.include_router(classes.router)\napp.include_router(announcements.router)\napp.include_router(children.router)\napp.include_router(admin.router)\napp.include_router(teacher.router)\napp.include_router(upload.router)\napp.include_router(parents.router)\n\n\n',
  "python_project/app/routers/auth.py": # filename: python_project/app/routers/auth.py\n'# filename: app/routers/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.core.security import verify_password\nfrom app.core.auth import create_access_token\nfrom app.models.user import User\nfrom app.schemas.auth import Token\n\nrouter = APIRouter(prefix="/auth", tags=["auth"])\n\n@router.post("/login", response_model=Token)\ndef login(\n    form_data: OAuth2PasswordRequestForm = Depends(), \n    db: Session = Depends(get_db)\n):\n    # form_data.username and form_data.password are transmitted as form data\n    user = db.query(User).filter(\n        (User.username == form_data.username) | (User.email == form_data.username)\n    ).first()\n\n    if not user or not verify_password(form_data.password, user.password_hash):\n        raise HTTPException(status_code=401, detail="Invalid credentials")\n\n    # Create JWT token\n    token = create_access_token(\n        {\n            "sub": user.username, \n            "role": user.role, \n            "user_id": user.id\n        }\n    )\n\n    return {"access_token": token, "token_type": "bearer"}\n',
  "python_project/app/routers/children.py": # filename: python_project/app/routers/children.py\n'# filename: app/routers/children.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session, joinedload\nfrom app.core.database import get_db\nfrom app.schemas.child import ChildBase, ChildOut\nfrom app.models.child import Child\nfrom app.models.class_ import Class\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt  # type: ignore\nfrom app.core.config import settings\nfrom app.utils.roles import is_parent\n\nrouter = APIRouter(prefix="/children", tags=["children"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ChildOut)\ndef add_child(c: ChildBase, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not is_parent(payload.get("role")) or payload.get("user_id") != c.parent_id:\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    # Check if the class exists\n    cls = db.query(Class).filter(Class.id == c.class_id).first()\n    if not cls:\n        raise HTTPException(status_code=400, detail="Invalid class_id. Class does not exist.")\n\n    ch = Child(**c.dict())\n    db.add(ch)\n    db.commit()\n    db.refresh(ch)\n    return ch\n\n@router.get("/my", response_model=list[ChildOut])\ndef get_my_children(\n    token: str = Depends(oauth2_scheme), \n    db: Session = Depends(get_db)\n):\n    """\n    Returns a list of children for the currently logged-in parent/class_rep,\n    including the class name for each child.\n    """\n    # Decode token\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    except jwt.JWTError:\n        raise HTTPException(status_code=403, detail="Invalid token")\n    \n    user_role = payload.get("role")\n    user_id = payload.get("user_id")\n    \n    # Ensure only parents (or class_reps) can fetch children\n    if not is_parent(user_role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    \n    # Query all children that belong to this parent’s user_id, joining with Class\n    children = db.query(Child).options(joinedload(Child.class_)).filter(Child.parent_id == user_id).all()\n    \n    return children',
  "python_project/app/routers/teacher.py": # filename: python_project/app/routers/teacher.py\n'# filename: app/routers/teacher.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session, joinedload\nfrom typing import List\nfrom app.core.database import get_db\nfrom app.models.user import User\nfrom app.models.class_ import Class\nfrom app.models.teacher_class import TeacherClass\nfrom app.models.announcement import Announcement\nfrom app.schemas.announcement import AnnouncementOut, AnnouncementCreate, AnnouncementUpdate\nfrom app.core.config import settings\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt  # type: ignore\nfrom app.utils.roles import can_create_announcements\nfrom app.schemas.class_ import ClassOut  # Import the correct schema\n\nrouter = APIRouter(prefix="/teacher", tags=["teacher"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n\n@router.get("/my-classes", response_model=List[ClassOut])  # Use ClassOut instead of Class\ndef get_my_classes(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    """Return a list of classes assigned to the logged-in teacher."""\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if payload.get("role") != "teacher":\n        raise HTTPException(status_code=403, detail="Not allowed")\n    teacher_id = payload.get("user_id")\n\n    class_ids = db.query(TeacherClass.class_id)\\\n                  .filter(TeacherClass.teacher_id == teacher_id).all()\n    if not class_ids:\n        return []\n    # Extract just the IDs\n    c_ids = [r.class_id for r in class_ids]\n    classes = db.query(Class).filter(Class.id.in_(c_ids)).all()\n    return [ClassOut.from_orm(cls) for cls in classes]  # Convert to Pydantic models\n\n\n\n@router.get("/my-announcements", response_model=List[AnnouncementOut])\ndef get_my_announcements(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    """\n    Return announcements for all classes that the teacher is assigned to.\n    Also includes any announcements created_by this teacher (if relevant).\n    """\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if payload.get("role") != "teacher":\n        raise HTTPException(status_code=403, detail="Not allowed")\n    teacher_id = payload.get("user_id")\n\n    # 1) Get the classes this teacher belongs to\n    class_ids = db.query(TeacherClass.class_id)\\\n                  .filter(TeacherClass.teacher_id == teacher_id).all()\n    c_ids = [r.class_id for r in class_ids]\n\n    # 2) Announcements for those classes\n    ann_class = db.query(Announcement)\\\n        .options(joinedload(Announcement.created_by))\\\n        .filter(Announcement.recipient_type=="class", Announcement.recipient_id.in_(c_ids))\n\n    # 3) Also announcements the teacher created (if you want to unify them)\n    ann_created_by_me = db.query(Announcement)\\\n        .options(joinedload(Announcement.created_by))\\\n        .filter(Announcement.created_by_id==teacher_id)\n\n    # Combine sets (SQL Alchemy queries as sets):\n    announcements = ann_class.union(ann_created_by_me).all()\n    return announcements\n\n\n@router.post("/announcements", response_model=List[AnnouncementOut])\ndef create_teacher_announcements(\n    announcement: AnnouncementCreate,\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db)\n):\n    # Decode JWT token\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    except jwt.JWTError:\n        raise HTTPException(status_code=403, detail="Could not validate credentials")\n    \n    user_id = payload.get("user_id")\n    role = payload.get("role")\n    \n    if not can_create_announcements(role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    \n    # Fetch the teacher user\n    teacher_user = db.query(User).filter(User.id == user_id, User.role == "teacher").first()\n    if not teacher_user:\n        raise HTTPException(status_code=404, detail="Teacher not found")\n    \n    new_announcements = []\n    \n    # Create announcements for classes\n    for class_id in announcement.classes:\n        cls = db.query(Class).filter(Class.id == class_id).first()\n        if not cls:\n            raise HTTPException(status_code=400, detail=f"Class with id {class_id} does not exist")\n        \n        ann = Announcement(\n            title=announcement.title,\n            body=announcement.body,\n            attachment_url=announcement.attachment_url,\n            created_by_id=teacher_user.id,\n            recipient_type="class",\n            recipient_id=class_id\n        )\n        db.add(ann)\n        new_announcements.append(ann)\n    \n    # Create announcements for parents\n    for parent_id in announcement.parents:\n        parent_user = db.query(User).filter(User.id == parent_id, User.role == "parent").first()\n        if not parent_user:\n            raise HTTPException(status_code=400, detail=f"Parent with id {parent_id} does not exist")\n        \n        ann = Announcement(\n            title=announcement.title,\n            body=announcement.body,\n            attachment_url=announcement.attachment_url,\n            created_by_id=teacher_user.id,\n            recipient_type="parent",\n            recipient_id=parent_id\n        )\n        db.add(ann)\n        new_announcements.append(ann)\n    \n    db.commit()\n    \n    # Refresh and collect the announcements to return\n    for ann in new_announcements:\n        db.refresh(ann)\n    \n    return new_announcements\n\n\n@router.delete("/announcements/{announcement_id}")\ndef delete_teacher_announcement(\n    announcement_id: int,\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db)\n):\n    """Delete an announcement if you are the creator."""\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    teacher_id = payload.get("user_id")\n    role = payload.get("role")\n    if role != "teacher":\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    ann = db.query(Announcement).filter(Announcement.id == announcement_id).first()\n    if not ann:\n        raise HTTPException(status_code=404, detail="Announcement not found")\n    if ann.created_by_id != teacher_id:\n        raise HTTPException(status_code=403, detail="You can only delete your own announcement")\n\n    db.delete(ann)\n    db.commit()\n    return {"detail": "Announcement deleted"}\n\n\n@router.patch("/announcements/{announcement_id}", response_model=AnnouncementOut)\ndef update_teacher_announcement(\n    announcement_id: int,\n    announcement_data: AnnouncementUpdate,\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db)\n):\n    """\n    Update an existing announcement (title, body, attachment_url).\n    Only the teacher who created the announcement can update it.\n    """\n    # Decode token\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    except:\n        raise HTTPException(status_code=403, detail="Could not validate credentials")\n\n    user_id = payload.get("user_id")\n    role = payload.get("role")\n\n    # Check if user can create/edit announcements\n    if not can_create_announcements(role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    # Retrieve the announcement\n    ann = db.query(Announcement).filter(Announcement.id == announcement_id).first()\n    if not ann:\n        raise HTTPException(status_code=404, detail="Announcement not found")\n\n    # Ensure the logged-in teacher is the creator\n    if ann.created_by_id != user_id:\n        raise HTTPException(status_code=403, detail="You can only update your own announcement")\n\n    # Apply updates\n    if announcement_data.title is not None:\n        ann.title = announcement_data.title\n    if announcement_data.body is not None:\n        ann.body = announcement_data.body\n    if announcement_data.attachment_url is not None:\n        ann.attachment_url = announcement_data.attachment_url\n\n    # Record who last updated it\n    ann.last_updated_by_id = user_id\n\n    db.commit()\n    db.refresh(ann)\n    return ann',
  "python_project/app/routers/upload.py": # filename: python_project/app/routers/upload.py\n'from fastapi import APIRouter, UploadFile, File, HTTPException\nimport os\nimport shutil\nfrom uuid import uuid4\n\nrouter = APIRouter(prefix="/upload", tags=["upload"])\n\nUPLOAD_DIR = "uploads"  # Directory to store files (adjust as needed)\nos.makedirs(UPLOAD_DIR, exist_ok=True)\n\n@router.post("/")\nasync def upload_file(file: UploadFile = File(...)):\n    """\n    Handles file uploads and returns the URL of the uploaded file.\n    """\n    try:\n        # Generate a unique filename\n        file_id = str(uuid4())\n        extension = os.path.splitext(file.filename)[-1]\n        file_path = os.path.join(UPLOAD_DIR, f"{file_id}{extension}")\n        \n        # Save file\n        with open(file_path, "wb") as buffer:\n            shutil.copyfileobj(file.file, buffer)\n        \n        # Return the file\'s public URL (adjust base URL as needed)\n        base_url = "http://127.0.0.1:8000"  # Change this for production\n        file_url = f"{base_url}/{UPLOAD_DIR}/{file_id}{extension}"\n        return {"url": file_url}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail="File upload failed") from e\n',
  "python_project/app/routers/users.py": # filename: python_project/app/routers/users.py\n'# filename: app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.core.security import hash_password\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_manage_users\nfrom fastapi import Path\n\nrouter = APIRouter(prefix="/users", tags=["users"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=UserOut)\ndef create_user(user_in: UserCreate, db: Session = Depends(get_db)):\n    if db.query(User).filter((User.username==user_in.username)|(User.email==user_in.email)).first():\n        raise HTTPException(status_code=400, detail="User exists")\n    user = User(\n        username=user_in.username,\n        first_name=user_in.first_name,\n        last_name=user_in.last_name,\n        email=user_in.email,\n        password_hash=hash_password(user_in.password),\n        role=user_in.role\n    )\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n\n@router.get("/me", response_model=UserOut)\ndef get_me(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    username = payload.get("sub")\n    user = db.query(User).filter(User.username==username).first()\n    if not user:\n        raise HTTPException(status_code=401, detail="Invalid token")\n    return user\n\n@router.get("/{user_id}", response_model=UserOut)\ndef get_user(user_id: int = Path(..., ge=1), token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    """\n    Retrieve a user\'s information by their ID.\n    Only accessible by admins.\n    """\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    role = payload.get("role")\n    if not can_manage_users(role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    user = db.query(User).filter(User.id == user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    return user\n',
  "python_project/app/routers/parents.py": # filename: python_project/app/routers/parents.py\n'from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt  # type: ignore\nfrom app.core.config import settings\nfrom app.core.database import get_db\nfrom app.models.user import User\nfrom app.schemas.user import UserOut\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/parents", tags=["parents"])\n\n# Define the OAuth2 scheme\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.get("/", response_model=list[UserOut])\ndef get_parents(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    """\n    Fetch all users with the role \'parent\'.\n    """\n    # Decode the token and check permissions\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    # Query all users with the \'parent\' role\n    parents = db.query(User).filter(User.role == "parent").all()\n    return parents\n',
  "python_project/app/routers/admin.py": # filename: python_project/app/routers/admin.py\n'# filename: app/routers/admin.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt  # type: ignore\nfrom app.core.config import settings\nfrom app.models.user import User\nfrom app.models.teacher_class import TeacherClass\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/admin", tags=["admin"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.put("/user/{user_id}/class_rep")\ndef make_class_rep(user_id: int, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    user = db.query(User).filter(User.id==user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    user.role = "class_rep"\n    db.commit()\n    return {"detail": "User promoted to class_rep"}\n\n@router.post("/assign-teacher-class")\ndef assign_teacher_class(\n    teacher_id: int,\n    class_id: int,\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db)\n):\n    """\n    Assign a teacher (teacher_id) to a class (class_id).\n    Only admins can do this.\n    """\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    teacher = db.query(User).filter(User.id == teacher_id, User.role=="teacher").first()\n    if not teacher:\n        raise HTTPException(status_code=400, detail="Invalid teacher_id or user is not a teacher.")\n\n    # Ensure we don\'t duplicate\n    existing = db.query(TeacherClass).filter_by(teacher_id=teacher_id, class_id=class_id).first()\n    if existing:\n        return {"detail": "Teacher is already assigned to this class."}\n\n    teacher_class = TeacherClass(teacher_id=teacher_id, class_id=class_id)\n    db.add(teacher_class)\n    db.commit()\n    return {"detail": f"Assigned teacher_id={teacher_id} to class_id={class_id}."}\n',
  "python_project/app/routers/classes.py": # filename: python_project/app/routers/classes.py\n'# filename: app/routers/classes.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.models.class_ import Class\nfrom app.schemas.class_ import ClassBase, ClassOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt  # type: ignore\nfrom app.core.config import settings\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/classes", tags=["classes"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ClassOut)\ndef create_class(c: ClassBase, token: str=Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    cls = Class(name=c.name)\n    db.add(cls)\n    db.commit()\n    db.refresh(cls)\n    return cls\n\n@router.get("/", response_model=list[ClassOut])\ndef list_classes(db: Session = Depends(get_db)):\n    # No auth needed, or optionally add auth if required.\n    return db.query(Class).all()\n',
  "python_project/app/routers/announcements.py": # filename: python_project/app/routers/announcements.py\n'# filename: app/routers/announcements.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom app.core.database import get_db\nfrom app.schemas.announcement import AnnouncementCreate, AnnouncementOut\nfrom app.models.announcement import Announcement\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt  # type: ignore\nfrom app.core.config import settings\nfrom app.utils.roles import can_create_announcements, is_parent\nfrom app.utils.rate_limit import check_rate_limit\nfrom app.models.child import Child\nfrom sqlalchemy import or_\nfrom sqlalchemy.orm import joinedload\nfrom app.models.child import Child\nfrom app.models.user import User\nfrom app.models.teacher_class import TeacherClass\nfrom python_project.app.schemas.user import UserOut\n\n\n\nrouter = APIRouter(prefix="/announcements", tags=["announcements"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=AnnouncementOut)\ndef create_announcement(\n    a: AnnouncementCreate, \n    token: str = Depends(oauth2_scheme), \n    db: Session = Depends(get_db)\n):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    user_id = payload.get("user_id")\n    role = payload.get("role")\n    if not can_create_announcements(role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    if not check_rate_limit(user_id):\n        raise HTTPException(status_code=429, detail="Rate limit exceeded")\n\n    ann = Announcement(\n        title=a.title,\n        body=a.body,\n        created_by=user_id,\n        last_updated_by=user_id,\n        recipient_type=a.recipient_type,\n        recipient_id=a.recipient_id\n    )\n    db.add(ann)\n    db.commit()\n    db.refresh(ann)\n    return ann\n\n@router.get("/for_parent", response_model=List[AnnouncementOut])\ndef get_announcements_for_parent(\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db)\n):\n    """\n    Returns announcements targeted to this parent\'s user_id (recipient_type=\'parent\')\n    AND announcements for all classes that any of this parent\'s children are in.\n    """\n    # Decode JWT token to extract user details\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    user_role = payload.get("role")\n    user_id = payload.get("user_id")\n\n    # Only parents (or class_rep acting as parents) can access\n    if not is_parent(user_role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    # 1) Query classes of this parent\'s children\n    child_classes = db.query(Child.class_id).filter(Child.parent_id == user_id).all()\n    class_ids = [row.class_id for row in child_classes]\n\n    # 2) Query class announcements\n    class_announcements = db.query(Announcement).options(\n        joinedload(Announcement.created_by)  # Ensure creator is eagerly loaded\n    ).filter(\n        Announcement.recipient_type == "class",\n        Announcement.recipient_id.in_(class_ids)\n    ).all()\n\n    # 3) Query direct announcements to the parent\n    parent_announcements = db.query(Announcement).options(\n        joinedload(Announcement.created_by)  # Ensure creator is eagerly loaded\n    ).filter(\n        Announcement.recipient_type == "parent",\n        Announcement.recipient_id == user_id\n    ).all()\n\n    # Combine and return the announcements\n    combined_announcements = class_announcements + parent_announcements\n    return combined_announcements\n\n\n@router.get("/teacher/parents", response_model=List[UserOut])\ndef get_teacher_parents(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    """\n    Fetch parents associated with the teacher\'s assigned classes.\n    Accessible by \'teacher\' and \'class_rep\' roles.\n    """\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    except jwt.JWTError:\n        raise HTTPException(status_code=403, detail="Could not validate credentials")\n\n    role = payload.get("role")\n    user_id = payload.get("user_id")\n\n    if role not in ["teacher", "class_rep", "admin"]:\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    if role == "admin":\n        # Admins can fetch all parents\n        parents = db.query(User).filter(User.role == "parent").all()\n        return parents\n    else:\n        # Teachers and class_reps fetch parents of their classes\n        # Step 1: Get all classes assigned to the teacher\n        teacher_classes = db.query(TeacherClass.class_id).filter(TeacherClass.teacher_id == user_id).all()\n        class_ids = [tc.class_id for tc in teacher_classes]\n\n        if not class_ids:\n            return []\n\n        # Step 2: Get all children in those classes\n        children = db.query(Child).filter(Child.class_id.in_(class_ids)).all()\n        parent_ids = list({child.parent_id for child in children})\n\n        if not parent_ids:\n            return []\n\n        # Step 3: Fetch unique parents\n        parents = db.query(User).filter(User.id.in_(parent_ids), User.role == "parent").all()\n        return parents',
  "python_project/app/core/auth.py": # filename: python_project/app/core/auth.py\n'# filename: app/core/auth.py\nfrom datetime import datetime, timedelta\nfrom jose import jwt  # type: ignore\nfrom app.core.config import settings\n\ndef create_access_token(data: dict, expires_delta: int = 3600):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(seconds=expires_delta)\n    to_encode.update({"exp": expire})\n    return jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)\n',
  "python_project/app/core/config.py": # filename: python_project/app/core/config.py\n'# filename: app/core/config.py\nimport os\nimport secrets\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Settings:\n    PROJECT_NAME: str = "Klasstra"\n    SQLALCHEMY_DATABASE_URI: str = os.getenv("DATABASE_URL", "postgresql+psycopg2://YOUR_DB_CONNECTION_STRING")\n    \n    # If JWT_SECRET is not provided, generate one securely.\n    jwt_secret_env = os.getenv("JWT_SECRET")\n    if not jwt_secret_env or jwt_secret_env.strip() == "":\n        # Generate a 43-character URL-safe secret (≈256 bits)\n        jwt_secret_env = secrets.token_urlsafe(32)\n        \n    JWT_SECRET: str = jwt_secret_env\n    JWT_ALGORITHM: str = os.getenv("JWT_ALGORITHM", "HS256")\n    RATE_LIMIT: int = 5 # announcements per minute per user\n\nsettings = Settings()\n',
  "python_project/app/core/database.py": # filename: python_project/app/core/database.py\n'# filename: app/core/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\n\nengine = create_engine(settings.SQLALCHEMY_DATABASE_URI, pool_pre_ping=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n',
  "python_project/app/core/security.py": # filename: python_project/app/core/security.py\n'# filename: app/core/security.py\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain: str, hashed: str) -> bool:\n    return pwd_context.verify(plain, hashed)\n',
  "python_project/app/utils/roles.py": # filename: python_project/app/utils/roles.py\n'# filename: app/utils/roles.py\ndef can_create_announcements(role: str) -> bool:\n    return role in ["teacher", "class_rep", "admin"]\n\ndef can_manage_users(role: str) -> bool:\n    return role == "admin"\n\ndef is_parent(role: str) -> bool:\n    return role in ["parent", "class_rep"]\n',
  "python_project/app/utils/rate_limit.py": # filename: python_project/app/utils/rate_limit.py\n'# filename: app/utils/rate_limit.py\nfrom collections import defaultdict\nfrom time import time\nfrom app.core.config import settings\n\nrates = defaultdict(list)\n\ndef check_rate_limit(user_id: int) -> bool:\n    now = time()\n    rates[user_id] = [t for t in rates[user_id] if t > now - 60]\n    if len(rates[user_id]) >= settings.RATE_LIMIT:\n        return False\n    rates[user_id].append(now)\n    return True\n',
  "python_project/app/models/teacher_class.py": # filename: python_project/app/models/teacher_class.py\n'# filename: app/models/teacher_class.py\nfrom sqlalchemy import Column, Integer, ForeignKey, PrimaryKeyConstraint\nfrom app.core.database import Base\n\nclass TeacherClass(Base):\n    __tablename__ = "teacher_classes"\n    \n    teacher_id = Column(Integer, ForeignKey("users.id"), nullable=False)\n    class_id = Column(Integer, ForeignKey("classes.id"), nullable=False)\n\n    # We enforce uniqueness on (teacher_id, class_id) pairs.\n    __table_args__ = (\n        PrimaryKeyConstraint(\'teacher_id\', \'class_id\', name=\'teacher_class_pk\'),\n    )\n',
  "python_project/app/models/user.py": # filename: python_project/app/models/user.py\n'# filename: app/models/user.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\n# Roles: "teacher", "parent", "admin", "class_rep"\nclass User(Base):\n    __tablename__ = "users"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True, nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)\n    password_hash = Column(String, nullable=False)\n    role = Column(String, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n',
  "python_project/app/models/child.py": # filename: python_project/app/models/child.py\n'# filename: app/models/child.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\nfrom sqlalchemy.orm import relationship\n\n\nclass Child(Base):\n    __tablename__ = "children"\n    id = Column(Integer, primary_key=True, index=True)\n    parent_id = Column(Integer, ForeignKey("users.id"), nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    class_id = Column(Integer, ForeignKey("classes.id"), nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n    class_ = relationship("Class")  # Define relationship\n',
  "python_project/app/models/announcement.py": # filename: python_project/app/models/announcement.py\n'# filename: app/models/announcement.py\n\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Announcement(Base):\n    __tablename__ = "announcements"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n\n    created_by_id = Column(Integer, ForeignKey("users.id"), nullable=False)\n    last_updated_by_id = Column(Integer, ForeignKey("users.id"), nullable=True)\n\n    recipient_type = Column(String, nullable=False)   # "class" or "parent"\n    recipient_id = Column(Integer, nullable=False)    # class_id or user_id\n\n    # Optional: store a file path or URL if there’s an attachment\n    attachment_url = Column(String, nullable=True)\n\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n    created_by = relationship(\n        "User",\n        foreign_keys=[created_by_id],\n        backref="announcements_created"\n    )\n    last_updated_by = relationship(\n        "User",\n        foreign_keys=[last_updated_by_id],\n        backref="announcements_updated"\n    )\n',
  "python_project/app/models/audit_log.py": # filename: python_project/app/models/audit_log.py\n'# filename: app/models/audit_log.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass AuditLog(Base):\n    __tablename__ = "audit_logs"\n    id = Column(Integer, primary_key=True, index=True)\n    entity_type = Column(String, nullable=False)\n    entity_id = Column(Integer, nullable=False)\n    action = Column(String, nullable=False)\n    performed_by = Column(Integer, ForeignKey("users.id"))\n    timestamp = Column(DateTime(timezone=True), server_default=func.now())\n',
  "python_project/app/models/class_.py": # filename: python_project/app/models/class_.py\n'# filename: app/models/class_.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Class(Base):\n    __tablename__ = "classes"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n',
  "python_project/app/schemas/auth.py": # filename: python_project/app/schemas/auth.py\n'# filename: app/schemas/auth.py\nfrom pydantic import BaseModel\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = "bearer"\n\nclass LoginData(BaseModel):\n    username: str\n    password: str\n',
  "python_project/app/schemas/user.py": # filename: python_project/app/schemas/user.py\n'# filename: app/schemas/user.py\nfrom pydantic import BaseModel, EmailStr, constr, Field\nfrom app.schemas.common import Timestamped\n\nclass UserBase(BaseModel):\n    username: str = Field(..., min_length=3, max_length=20, pattern=r"^[a-zA-Z0-9_]+$",\n                          description="Username must be 3-20 characters long and contain only alphanumeric characters or underscores.")\n    first_name: str = Field(..., min_length=1, description="First name is required and must have at least 1 character.")\n    last_name: str = Field(..., min_length=1, description="Last name is required and must have at least 1 character.")\n    email: EmailStr = Field(..., description="A valid email address.")\n    role: str = Field(..., pattern=r"^(teacher|parent|admin|class_rep)$", \n                      description="Role must be one of: teacher, parent, admin, class_rep.")\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8, max_length=50, \n                          description="Password must be between 8 and 50 characters.")\n\nclass UserOut(UserBase, Timestamped):\n    id: int\n',
  "python_project/app/schemas/common.py": # filename: python_project/app/schemas/common.py\n'# filename: app/schemas/common.py\nfrom pydantic import BaseModel\nfrom datetime import datetime\n\nclass Timestamped(BaseModel):\n    created_at: datetime\n    updated_at: datetime | None\n    class Config:\n        from_attributes = True\n',
  "python_project/app/schemas/child.py": # filename: python_project/app/schemas/child.py\n'# filename: app/schemas/child.py\n\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\nfrom app.schemas.class_ import ClassOut  # Import ClassOut\n\nclass ChildBase(BaseModel):\n    parent_id: int\n    first_name: str\n    last_name: str\n    class_id: int\n\nclass ChildOut(ChildBase, Timestamped):\n    id: int\n    class_: ClassOut  # Nested ClassOut\n\n    class Config:\n        from_attributes = True\n',
  "python_project/app/schemas/announcement.py": # filename: python_project/app/schemas/announcement.py\n'# filename: app/schemas/announcement.py\n\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nfrom datetime import datetime\nfrom app.schemas.user import UserOut  # Ensure this is correctly imported\n\nclass AnnouncementBase(BaseModel):\n    title: str\n    body: str\n\nclass AnnouncementCreate(AnnouncementBase):\n    attachment_url: Optional[str] = None\n    classes: List[int] = []\n    parents: List[int] = []\n\nclass AnnouncementOut(BaseModel):\n    id: int\n    title: str\n    body: str\n    created_by: UserOut\n    last_updated_by: Optional[UserOut]\n    recipient_type: str\n    recipient_id: int\n    attachment_url: Optional[str]\n    created_at: datetime\n    updated_at: Optional[datetime]\n\n    class Config:\n        orm_mode = True\n\nclass AnnouncementUpdate(BaseModel):\n    title: Optional[str] = None\n    body: Optional[str] = None\n    attachment_url: Optional[str] = None',
  "python_project/app/schemas/class_.py": # filename: python_project/app/schemas/class_.py\n'# filename: app/schemas/class_.py\n\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ClassBase(BaseModel):\n    name: str\n\nclass ClassOut(ClassBase, Timestamped):\n    id: int\n\n    class Config:\n        from_attributes = True\n',
  "vue_js_project/jsconfig.json": # filename: vue_js_project/jsconfig.json\n'{\n    "compilerOptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "moduleResolution": "node",\n      "baseUrl": ".",\n      "paths": {\n        "@/*": ["src/*"]\n      }\n    },\n    "include": ["src/**/*", "index.html"],\n    "exclude": ["node_modules", "dist"]\n  }',
  "vue_js_project/index.html": # filename: vue_js_project/index.html\n'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id="app"></div>\n  <script type="module" src="/src/main.js"></script>\n</body>\n</html>\n',
  "vue_js_project/tailwind.config.js": # filename: vue_js_project/tailwind.config.js\n'// filename: vue_js_project/tailwind.config.js\nmodule.exports = {\n  content: ["./index.html","./src/**/*.{vue,js,ts,jsx,tsx}"],\n  darkMode: \'class\',\n  theme: {\n    extend: {\n      colors: {\n        primary: \'#2563eb\',\n        secondary: \'#9333ea\'\n      }\n    },\n  },\n  plugins: [],\n}\n',
  "vue_js_project/vite.config.js": # filename: vue_js_project/vite.config.js\n"// vite.config.js\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n  plugins: [vue()],\n});\n",
  "vue_js_project/README.md": # filename: vue_js_project/README.md\n'# vue_js_project\n\n## Project setup\n```\nnpm install\n```\n\n### Compiles and hot-reloads for development\n```\nnpm run serve\n```\n\n### Compiles and minifies for production\n```\nnpm run build\n```\n\n### Lints and fixes files\n```\nnpm run lint\n```\n\n### Customize configuration\nSee [Configuration Reference](https://cli.vuejs.org/config/).\n',
  "vue_js_project/package.json": # filename: vue_js_project/package.json\n'{\n  "name": "vue_js_project",\n  "version": "1.0.0",\n  "description": "## Project setup ``` npm install ```",\n  "main": "postcss.config.js",\n  "dependencies": {\n    "acorn": "^8.14.0",\n    "ansi-regex": "^6.1.0",\n    "ansi-styles": "^6.2.1",\n    "any-promise": "^1.3.0",\n    "anymatch": "^3.1.3",\n    "arg": "^5.0.2",\n    "asynckit": "^0.4.0",\n    "autoprefixer": "^10.4.20",\n    "axios": "^1.7.9",\n    "balanced-match": "^1.0.2",\n    "binary-extensions": "^2.3.0",\n    "brace-expansion": "^2.0.1",\n    "braces": "^3.0.3",\n    "browserslist": "^4.24.3",\n    "buffer-from": "^1.1.2",\n    "camelcase-css": "^2.0.1",\n    "caniuse-lite": "^1.0.30001689",\n    "chokidar": "^3.6.0",\n    "color-convert": "^2.0.1",\n    "color-name": "^1.1.4",\n    "combined-stream": "^1.0.8",\n    "commander": "^4.1.1",\n    "cross-spawn": "^7.0.6",\n    "cssesc": "^3.0.0",\n    "csstype": "^3.1.3",\n    "delayed-stream": "^1.0.0",\n    "didyoumean": "^1.2.2",\n    "dlv": "^1.1.3",\n    "eastasianwidth": "^0.2.0",\n    "electron-to-chromium": "^1.5.74",\n    "emoji-regex": "^9.2.2",\n    "entities": "^4.5.0",\n    "esbuild": "^0.18.20",\n    "escalade": "^3.2.0",\n    "estree-walker": "^2.0.2",\n    "fast-glob": "^3.3.2",\n    "fastq": "^1.17.1",\n    "fill-range": "^7.1.1",\n    "follow-redirects": "^1.15.9",\n    "foreground-child": "^3.3.0",\n    "form-data": "^4.0.1",\n    "fraction.js": "^4.3.7",\n    "fsevents": "^2.3.3",\n    "function-bind": "^1.1.2",\n    "glob": "^10.4.5",\n    "glob-parent": "^6.0.2",\n    "hasown": "^2.0.2",\n    "is-binary-path": "^2.1.0",\n    "is-core-module": "^2.16.0",\n    "is-extglob": "^2.1.1",\n    "is-fullwidth-code-point": "^3.0.0",\n    "is-glob": "^4.0.3",\n    "is-number": "^7.0.0",\n    "isexe": "^2.0.0",\n    "jackspeak": "^3.4.3",\n    "jiti": "^1.21.7",\n    "jwt-decode": "^3.1.2",\n    "lilconfig": "^3.1.3",\n    "lines-and-columns": "^1.2.4",\n    "lru-cache": "^10.4.3",\n    "magic-string": "^0.30.17",\n    "merge2": "^1.4.1",\n    "micromatch": "^4.0.8",\n    "mime-db": "^1.52.0",\n    "mime-types": "^2.1.35",\n    "minimatch": "^9.0.5",\n    "minipass": "^7.1.2",\n    "mz": "^2.7.0",\n    "nanoid": "^3.3.8",\n    "node-releases": "^2.0.19",\n    "normalize-path": "^3.0.0",\n    "normalize-range": "^0.1.2",\n    "object-assign": "^4.1.1",\n    "object-hash": "^3.0.0",\n    "package-json-from-dist": "^1.0.1",\n    "path-key": "^3.1.1",\n    "path-parse": "^1.0.7",\n    "path-scurry": "^1.11.1",\n    "picocolors": "^1.1.1",\n    "picomatch": "^2.3.1",\n    "pify": "^2.3.0",\n    "pinia": "^2.3.0",\n    "pirates": "^4.0.6",\n    "postcss": "^8.4.49",\n    "postcss-import": "^15.1.0",\n    "postcss-js": "^4.0.1",\n    "postcss-load-config": "^4.0.2",\n    "postcss-nested": "^6.2.0",\n    "postcss-selector-parser": "^6.1.2",\n    "postcss-value-parser": "^4.2.0",\n    "proxy-from-env": "^1.1.0",\n    "queue-microtask": "^1.2.3",\n    "read-cache": "^1.0.0",\n    "readdirp": "^3.6.0",\n    "resolve": "^1.22.9",\n    "reusify": "^1.0.4",\n    "rollup": "^3.29.5",\n    "run-parallel": "^1.2.0",\n    "shebang-command": "^2.0.0",\n    "shebang-regex": "^3.0.0",\n    "signal-exit": "^4.1.0",\n    "source-map": "^0.6.1",\n    "source-map-js": "^1.2.1",\n    "source-map-support": "^0.5.21",\n    "string-width": "^5.1.2",\n    "string-width-cjs": "^4.2.3",\n    "strip-ansi": "^7.1.0",\n    "strip-ansi-cjs": "^6.0.1",\n    "sucrase": "^3.35.0",\n    "supports-preserve-symlinks-flag": "^1.0.0",\n    "tailwindcss": "^3.4.17",\n    "terser": "^5.37.0",\n    "thenify": "^3.3.1",\n    "thenify-all": "^1.6.0",\n    "to-regex-range": "^5.0.1",\n    "ts-interface-checker": "^0.1.13",\n    "undici-types": "^6.20.0",\n    "update-browserslist-db": "^1.1.1",\n    "util-deprecate": "^1.0.2",\n    "vue": "^3.5.13",\n    "vue-demi": "^0.14.10",\n    "vue-router": "^4.5.0",\n    "vue-toastification": "^2.0.0-rc.5",\n    "vuex": "^4.1.0",\n    "which": "^2.0.2",\n    "wrap-ansi": "^8.1.0",\n    "wrap-ansi-cjs": "^7.0.0",\n    "yaml": "^2.6.1"\n  },\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "serve": "vite preview"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "@vitejs/plugin-vue": "^5.2.1",\n    "vite": "^6.0.4"\n  }\n}\n',
  "vue_js_project/postcss.config.js": # filename: vue_js_project/postcss.config.js\n'// filename: vue_js_project/postcss.config.js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n',
  "vue_js_project/public/index.html": # filename: vue_js_project/public/index.html\n'<!-- filename: vue_js_project/public/index.html -->\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id="app"></div>\n</body>\n</html>\n',
  "vue_js_project/src/App.vue": # filename: vue_js_project/src/App.vue\n'<!-- filename: vue_js_project/src/App.vue -->\n<template>\n  <div class="bg-white dark:bg-gray-900 min-h-screen text-gray-900 dark:text-white">\n    <Navbar />\n    <router-view />\n  </div>\n</template>\n\n<script setup>\nimport Navbar from \'./components/Navbar.vue\'\n</script>\n\n<style scoped>\n</style>\n',
  "vue_js_project/src/main.js": # filename: vue_js_project/src/main.js\n"// filename: src/main.js\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport './assets/tailwind.css';\nimport router from './router';\nimport store from './store';\nimport Toast from 'vue-toastification';\nimport 'vue-toastification/dist/index.css';\n\n// Rehydrate the auth state from localStorage\nstore.commit('rehydrateAuth');\n\n// Create the Vue app\nconst app = createApp(App);\n\n// Apply dark mode from the store when the app initializes\nfunction applyDarkMode() {\n  if (store.state.darkMode) {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n}\n\n// Call the function once during app initialization\napplyDarkMode();\n\n// Use Vuex `subscribe` to reactively handle changes to `darkMode`\nstore.subscribe((mutation) => {\n  if (mutation.type === 'toggleDarkMode' || mutation.type === 'setDarkMode') {\n    applyDarkMode();\n  }\n});\n\n// Install plugins\napp.use(router);\napp.use(store);\napp.use(Toast, {\n  timeout: 3000,\n  closeOnClick: true,\n  pauseOnFocusLoss: true,\n  pauseOnHover: true,\n  draggable: true,\n});\n\n// Mount the app\napp.mount('#app');\n",
  "vue_js_project/src/router.js": # filename: vue_js_project/src/router.js\n"// filename: src/router.js\nimport { createRouter, createWebHistory } from 'vue-router';\nimport LoginPage from './pages/LoginPage.vue';\nimport RegisterPage from './pages/RegisterPage.vue';\nimport DashboardTeacher from './pages/DashboardTeacher.vue';\nimport DashboardParent from './pages/DashboardParent.vue';\nimport DashboardAdmin from './pages/DashboardAdmin.vue';\nimport store from './store/index.js'; // Import the store for route guards\n\nconst routes = [\n  { path: '/', redirect: '/login' },\n  { path: '/login', component: LoginPage },\n  { path: '/register', component: RegisterPage },\n  { \n    path: '/teacher', \n    component: DashboardTeacher,\n    meta: { requiresAuth: true, role: 'teacher' }\n  },\n  { \n    path: '/parent', \n    component: DashboardParent,\n    meta: { requiresAuth: true, role: ['parent', 'class_rep'] }\n  },\n  { \n    path: '/admin', \n    component: DashboardAdmin,\n    meta: { requiresAuth: true, role: 'admin' }\n  },\n  // Add a catch-all route for 404\n  { path: '/:pathMatch(.*)*', name: 'NotFound', component: () => import('./pages/NotFound.vue') },\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\n// Global navigation guard\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.meta.requiresAuth;\n  const role = to.meta.role;\n  const isAuthenticated = store.getters.isAuthenticated;\n  const userRole = store.getters.getUserRole;\n\n  if (requiresAuth) {\n    if (!isAuthenticated) {\n      return next('/login');\n    }\n\n    if (role) {\n      if (Array.isArray(role)) {\n        if (!role.includes(userRole)) {\n          return next('/login');\n        }\n      } else {\n        if (userRole !== role) {\n          return next('/login');\n        }\n      }\n    }\n  }\n\n  next();\n});\n\nexport default router;\n",
  "vue_js_project/src/plugins/axios.js": # filename: vue_js_project/src/plugins/axios.js\n'// filename: vue_js_project/src/plugins/axios.js\nimport axios from \'axios\';\n\n// Set your backend API base URL\naxios.defaults.baseURL = \'http://localhost:8000\';\n\n// Function to set or remove the Authorization header\nexport function setAuthToken(token) {\n  if (token) {\n    console.log("Setting token in localStorage and Axios headers:", token);\n    localStorage.setItem(\'accessToken\', token);\n    axios.defaults.headers.common[\'Authorization\'] = `Bearer ${token}`;\n  } else {\n    console.log("Removing token from localStorage and Axios headers");\n    localStorage.removeItem(\'accessToken\');\n    delete axios.defaults.headers.common[\'Authorization\'];\n  }\n}\n\n// Initialize the Authorization header if token exists in localStorage\nconst storedToken = localStorage.getItem(\'accessToken\');\nif (storedToken) {\n  console.log("Found token in localStorage, setting Axios Authorization header:", storedToken);\n  axios.defaults.headers.common[\'Authorization\'] = `Bearer ${storedToken}`;\n} else {\n  console.log("No token found in localStorage");\n}\n\nexport default axios;\n',
  "vue_js_project/src/components/Navbar.vue": # filename: vue_js_project/src/components/Navbar.vue\n'<!-- filename: vue_js_project/src/components/Navbar.vue -->\n<template>\n  <nav class="p-4 flex justify-between items-center bg-primary dark:bg-gray-800">\n    <div class="text-white font-bold">Klasstra</div>\n    <div class="flex items-center space-x-4">\n      <ThemeToggle />\n      <button @click="logout" class="bg-white text-black px-3 py-1 rounded">Logout</button>\n    </div>\n  </nav>\n</template>\n\n<script setup>\nimport { useStore } from \'vuex\'\nimport ThemeToggle from \'./ThemeToggle.vue\'\nconst store = useStore()\n\nfunction logout() {\n  store.commit(\'setAuth\', {token:null, role:null})\n  location.href = \'/login\'\n}\n</script>\n',
  "vue_js_project/src/components/AnnouncementCard.vue": # filename: vue_js_project/src/components/AnnouncementCard.vue\n'<!-- filename: src/components/AnnouncementCard.vue -->\n<template>\n  <div class="border rounded p-4 shadow mb-4 bg-white dark:bg-gray-800 dark:text-white">\n    <h2 class="font-bold text-lg">{{ announcement.title }}</h2>\n    <p class="mt-2">{{ announcement.body }}</p>\n    <div v-if="announcement.attachment_url" class="mt-2">\n      <a :href="announcement.attachment_url" target="_blank" class="text-blue-500 underline">View Attachment</a>\n    </div>\n    <small class="text-gray-500 dark:text-gray-400 mt-2 block">\n      By: {{ announcement.created_by.first_name }} {{ announcement.created_by.last_name }} • {{ formattedDate }}\n    </small>\n    \n    <!-- Edit & Delete Buttons -->\n    <div v-if="isCreator" class="mt-2 flex space-x-2">\n      <button @click="openEditModal" class="text-yellow-500 hover:underline">Edit</button>\n      <button @click="deleteAnnouncement" class="text-red-500 hover:underline">Delete</button>\n    </div>\n\n    <!-- Edit Modal -->\n    <EditAnnouncementModal\n      v-if="showEditModal"\n      :announcement="announcement"\n      @close="showEditModal = false"\n      @edited="onEdited"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from \'vue\';\nimport { useStore } from \'vuex\';\nimport axios from \'../plugins/axios.js\'\nimport { useToast } from \'vue-toastification\';\nimport EditAnnouncementModal from \'../components/EditAnnouncementModal.vue\';\n\nconst props = defineProps({\n  announcement: {\n    type: Object,\n    required: true,\n  },\n});\n\nconst emit = defineEmits([\'edited\', \'deleted\']);\n\nconst store = useStore();\nconst toast = useToast();\n\nconst showEditModal = ref(false);\n\n// Check if the logged-in teacher is the creator\nconst isCreator = computed(() => {\n  return store.getters.getUserId === props.announcement.created_by.id;\n});\n\n// Format date\nconst formattedDate = computed(() => {\n  const date = new Date(props.announcement.created_at);\n  return date.toLocaleString();\n});\n\n// Open edit modal\nconst openEditModal = () => {\n  showEditModal.value = true;\n};\n\n// Delete announcement\nconst deleteAnnouncement = async () => {\n  if (!confirm(\'Are you sure you want to delete this announcement?\')) return;\n\n  try {\n    await axios.delete(`/teacher/announcements/${props.announcement.id}`, {\n      headers: { Authorization: `Bearer ${store.state.token}` },\n    });\n    toast.success(\'Announcement deleted successfully!\');\n    emit(\'deleted\');\n  } catch (err) {\n    console.error(\'Error deleting announcement:\', err);\n    toast.error(\'Failed to delete announcement.\');\n  }\n};\n\n// Handle edited announcement\nconst onEdited = () => {\n  showEditModal.value = false;\n  emit(\'edited\');\n};\n</script>\n\n<style scoped>\n/* Add any component-specific styles here */\n</style>\n',
  "vue_js_project/src/components/HelloWorld.vue": # filename: vue_js_project/src/components/HelloWorld.vue\n'<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n    <p>\n      For a guide and recipes on how to configure / customize this project,<br>\n      check out the\n      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.\n    </p>\n    <h3>Installed CLI Plugins</h3>\n    <ul>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>\n    </ul>\n    <h3>Essential Links</h3>\n    <ul>\n      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>\n      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>\n      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>\n      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>\n      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>\n    </ul>\n    <h3>Ecosystem</h3>\n    <ul>\n      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>\n      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>\n      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>\n      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>\n      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'HelloWorld\',\n  props: {\n    msg: String\n  }\n}\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n',
  "vue_js_project/src/components/EditAnnouncementModal.vue": # filename: vue_js_project/src/components/EditAnnouncementModal.vue\n'<!-- filename: src/components/EditAnnouncementModal.vue -->\n<template>\n    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">\n      <div class="bg-white dark:bg-gray-800 p-6 rounded shadow-lg w-11/12 max-w-md">\n        <h2 class="text-xl font-bold mb-4">Edit Announcement</h2>\n        <form @submit.prevent="submitEdit" class="space-y-4">\n          <div>\n            <label class="block text-sm font-medium">Title</label>\n            <input\n              v-model="editTitle"\n              type="text"\n              required\n              class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n            />\n          </div>\n          <div>\n            <label class="block text-sm font-medium">Body</label>\n            <textarea\n              v-model="editBody"\n              required\n              class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n            ></textarea>\n          </div>\n          <div>\n            <label class="block text-sm font-medium">Attachment URL</label>\n            <input\n              v-model="editAttachmentUrl"\n              type="text"\n              class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n              placeholder="https://example.com/attachment.pdf"\n            />\n          </div>\n          <div class="flex space-x-4">\n            <button\n              type="submit"\n              :disabled="isSubmitting"\n              class="bg-primary text-white px-4 py-2 rounded w-full disabled:opacity-50"\n            >\n              {{ isSubmitting ? \'Saving...\' : \'Save Changes\' }}\n            </button>\n            <button\n              type="button"\n              @click="$emit(\'close\')"\n              class="bg-gray-300 dark:bg-gray-600 text-black dark:text-white px-4 py-2 rounded w-full"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref } from \'vue\';\n  import axios from \'../plugins/axios.js\'\n  import { useStore } from \'vuex\';\n  import { useToast } from \'vue-toastification\';\n  \n  const props = defineProps({\n    announcement: {\n      type: Object,\n      required: true,\n    },\n  });\n  \n  const emit = defineEmits([\'close\', \'edited\']);\n  \n  const store = useStore();\n  const toast = useToast();\n  \n  // Form state\n  const editTitle = ref(props.announcement.title);\n  const editBody = ref(props.announcement.body);\n  const editAttachmentUrl = ref(props.announcement.attachment_url || \'\');\n  const isSubmitting = ref(false);\n  \n  // Submit edited announcement\n  const submitEdit = async () => {\n    isSubmitting.value = true;\n    try {\n      const payload = {\n        title: editTitle.value,\n        body: editBody.value,\n        attachment_url: editAttachmentUrl.value,\n      };\n  \n      await axios.patch(`/teacher/announcements/${props.announcement.id}`, payload, {\n        headers: { Authorization: `Bearer ${store.state.token}` },\n      });\n  \n      toast.success(\'Announcement updated successfully!\');\n      emit(\'edited\');\n    } catch (err) {\n      console.error(\'Error updating announcement:\', err);\n      toast.error(\'Failed to update announcement.\');\n    } finally {\n      isSubmitting.value = false;\n    }\n  };\n  </script>\n  \n  <style scoped>\n  /* Modal styles can be enhanced as needed */\n  </style>\n  ',
  "vue_js_project/src/components/AnnouncementForm.vue": # filename: vue_js_project/src/components/AnnouncementForm.vue\n'<!-- filename: src/components/AnnouncementForm.vue -->\n<template>\n    <form @submit.prevent="submitAnnouncement" class="space-y-4">\n      \n      <!-- TITLE -->\n      <div>\n        <label class="block text-sm font-medium">Title</label>\n        <input\n          v-model="title"\n          type="text"\n          placeholder="Announcement Title"\n          required\n          class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n        />\n      </div>\n  \n      <!-- BODY -->\n      <div>\n        <label class="block text-sm font-medium">Body</label>\n        <textarea\n          v-model="body"\n          rows="4"\n          placeholder="Type your announcement here..."\n          required\n          class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n        ></textarea>\n      </div>\n  \n      <!-- RECIPIENTS CHECKBOXES -->\n      <div>\n        <label class="block text-sm font-medium">Recipients</label>\n        <div class="flex space-x-4">\n          <div class="flex items-center">\n            <input\n              type="checkbox"\n              id="classes"\n              v-model="recipientOptions.classes"\n              class="mr-2"\n            />\n            <label for="classes">Classes</label>\n          </div>\n          <div class="flex items-center">\n            <input\n              type="checkbox"\n              id="parents"\n              v-model="recipientOptions.parents"\n              class="mr-2"\n            />\n            <label for="parents">Parents</label>\n          </div>\n        </div>\n      </div>\n  \n      <!-- CLASSES DROPDOWN -->\n      <div v-if="recipientOptions.classes">\n        <label class="block text-sm font-medium">Select Classes</label>\n        <select\n          v-model="selectedClasses"\n          multiple\n          class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n        >\n          <option v-for="cls in classes" :key="cls.id" :value="cls.id">\n            {{ cls.name }}\n          </option>\n        </select>\n      </div>\n  \n      <!-- PARENTS DROPDOWN -->\n      <div v-if="recipientOptions.parents">\n        <label class="block text-sm font-medium">Select Parents</label>\n        <select\n          v-model="selectedParents"\n          multiple\n          class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n        >\n          <option v-for="parent in parents" :key="parent.id" :value="parent.id">\n            {{ parent.first_name }} {{ parent.last_name }}\n          </option>\n        </select>\n      </div>\n  \n      <!-- ATTACHMENT FILE INPUT (OPTIONAL) -->\n      <div>\n        <label class="block text-sm font-medium">Attach File (optional)</label>\n        <input\n          type="file"\n          @change="handleFileUpload"\n          class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n        />\n      </div>\n  \n      <!-- SUBMIT BUTTON -->\n      <div>\n        <button\n          type="submit"\n          :disabled="isSubmitting"\n          class="bg-primary text-white px-4 py-2 rounded w-full disabled:opacity-50"\n        >\n          {{ isSubmitting ? \'Publishing...\' : \'Publish Announcement\' }}\n        </button>\n      </div>\n    </form>\n  </template>\n  \n  <script setup>\n  import { ref, onMounted } from \'vue\';\n  import axios from \'../plugins/axios.js\';\n  import { useStore } from \'vuex\';\n  import { useToast } from \'vue-toastification\';\n  \n  const emit = defineEmits([\'announcementCreated\']);\n  \n  // Form state\n  const title = ref(\'\');\n  const body = ref(\'\');\n  const recipientOptions = ref({\n    classes: false,\n    parents: false,\n  });\n  const selectedClasses = ref([]);\n  const selectedParents = ref([]);\n  const attachmentFile = ref(null);\n  const isSubmitting = ref(false);\n  \n  // Recipient data\n  const classes = ref([]);\n  const parents = ref([]);\n  \n  const store = useStore();\n  const toast = useToast();\n  \n  // Fetch classes & parents (depends on user role)\n  const fetchRecipients = async () => {\n    try {\n      // 1) Fetch classes assigned to the teacher\n      const classesRes = await axios.get(\'/teacher/my-classes\', {\n        headers: {\n          Authorization: `Bearer ${store.state.token}`,\n        },\n      });\n      classes.value = classesRes.data;\n  \n      // 2) Fetch parents (differ by role)\n      let parentsRes;\n      const userRole = store.getters.getUserRole;\n      if (userRole === \'admin\') {\n        // Admin fetches all parents\n        parentsRes = await axios.get(\'/parents\', {\n          headers: {\n            Authorization: `Bearer ${store.state.token}`,\n          },\n        });\n      } else if (userRole === \'teacher\' || userRole === \'class_rep\') {\n        // Teachers/class_rep fetch parents for their classes\n        parentsRes = await axios.get(\'/announcements/teacher/parents\', {\n          headers: {\n            Authorization: `Bearer ${store.state.token}`,\n          },\n        });\n      } else {\n        // Other roles not supported here\n        parentsRes = { data: [] };\n      }\n  \n      parents.value = parentsRes.data;\n    } catch (err) {\n      console.error(\'Error fetching recipients:\', err);\n      toast.error(\'Failed to load recipients.\');\n    }\n  };\n  \n  // Handle file selection\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      attachmentFile.value = file;\n    }\n  };\n  \n  // Submit announcement\n  const submitAnnouncement = async () => {\n    isSubmitting.value = true;\n    try {\n      let attachmentUrl = null;\n  \n      // If there\'s a file, upload it first\n      if (attachmentFile.value) {\n        const formData = new FormData();\n        formData.append(\'file\', attachmentFile.value);\n  \n        const uploadRes = await axios.post(\'/upload\', formData, {\n          headers: {\n            \'Content-Type\': \'multipart/form-data\',\n            Authorization: `Bearer ${store.state.token}`,\n          },\n        });\n        attachmentUrl = uploadRes.data.url; // Adjust based on your backend response\n      }\n  \n      // Check that at least one recipient group is selected\n      const classesRecipients = recipientOptions.value.classes\n        ? selectedClasses.value\n        : [];\n      const parentsRecipients = recipientOptions.value.parents\n        ? selectedParents.value\n        : [];\n  \n      if (classesRecipients.length === 0 && parentsRecipients.length === 0) {\n        toast.error(\'Please select at least one recipient.\');\n        isSubmitting.value = false;\n        return;\n      }\n  \n      // Post a single request to /teacher/announcements\n      const response = await axios.post(\n        \'/teacher/announcements\',\n        {\n          title: title.value,\n          body: body.value,\n          attachment_url: attachmentUrl,\n          classes: classesRecipients,  // array of class IDs\n          parents: parentsRecipients,  // array of parent IDs\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${store.state.token}`,\n          },\n        }\n      );\n  \n      // Clear form\n      title.value = \'\';\n      body.value = \'\';\n      recipientOptions.value = { classes: false, parents: false };\n      selectedClasses.value = [];\n      selectedParents.value = [];\n      attachmentFile.value = null;\n  \n      // Notify parent component\n      emit(\'announcementCreated\');\n  \n      toast.success(\'Announcement published successfully!\');\n    } catch (err) {\n      console.error(\'Error publishing announcement:\', err);\n      if (err.response && err.response.data && err.response.data.detail) {\n        toast.error(`Failed to publish announcement: ${err.response.data.detail}`);\n      } else {\n        toast.error(\'Failed to publish announcement.\');\n      }\n    } finally {\n      isSubmitting.value = false;\n    }\n  };\n  \n  // Fetch recipients on mount\n  onMounted(() => {\n    fetchRecipients();\n  });\n  </script>\n  \n  <style scoped>\n  /* Add any specific styling here */\n  </style>\n  ',
  "vue_js_project/src/components/ThemeToggle.vue": # filename: vue_js_project/src/components/ThemeToggle.vue\n'<!-- filename: vue_js_project/src/components/ThemeToggle.vue -->\n<template>\n  <button @click="toggle" class="px-3 py-1 bg-secondary text-white rounded">\n    {{ isDark ? \'Light Mode\' : \'Dark Mode\' }}\n  </button>\n</template>\n\n<script setup>\nimport { computed } from \'vue\';\nimport { useStore } from \'vuex\';\n\nconst store = useStore();\nconst isDark = computed(() => store.state.darkMode);\n\nfunction toggle() {\n  store.commit(\'toggleDarkMode\'); // Toggle dark mode in the store\n}\n</script>\n',
  "vue_js_project/src/components/ChildCard.vue": # filename: vue_js_project/src/components/ChildCard.vue\n'<!-- filename: vue_js_project/src/components/ChildCard.vue -->\n<template>\n    <div class="border rounded p-4 shadow mb-4 bg-white dark:bg-gray-800 dark:text-white">\n      <h2 class="font-bold text-lg">{{ firstName }} {{ lastName }}</h2>\n      <p class="mt-2">Class: {{ className }}</p>\n      <small class="text-gray-500 dark:text-gray-400">\n        Added on: {{ formattedDate }}\n      </small>\n    </div>\n  </template>\n  \n  <script setup>\n  import { computed } from \'vue\'\n  \n  const props = defineProps({\n    firstName: {\n      type: String,\n      required: true\n    },\n    lastName: {\n      type: String,\n      required: true\n    },\n    className: {\n      type: String,\n      required: true\n    },\n    createdAt: {\n      type: String,\n      required: true\n    }\n  })\n  \n  // Compute formatted date\n  const formattedDate = computed(() => {\n    const date = new Date(props.createdAt)\n    return date.toLocaleDateString(undefined, {\n      year: \'numeric\',\n      month: \'long\',\n      day: \'numeric\'\n    })\n  })\n  </script>\n  \n  <style scoped>\n  /* Add any component-specific styles here */\n  </style>\n  ',
  "vue_js_project/src/components/AddChild.vue": # filename: vue_js_project/src/components/AddChild.vue\n'<!-- filename: vue_js_project/src/components/AddChild.vue -->\n<template>\n    <div class="mt-8 p-4 border rounded bg-white dark:bg-gray-800">\n      <h2 class="text-xl font-bold mb-4">Add a Child</h2>\n      <form @submit.prevent="handleSubmit">\n        <div class="mb-2">\n          <input\n            v-model="firstName"\n            placeholder="Child\'s First Name"\n            class="w-full p-2 border rounded mb-2 bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n            required\n          />\n        </div>\n        <div class="mb-2">\n          <input\n            v-model="lastName"\n            placeholder="Child\'s Last Name"\n            class="w-full p-2 border rounded mb-2 bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n            required\n          />\n        </div>\n        <div class="mb-4">\n          <select\n            v-model="selectedClassId"\n            class="w-full p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n            required\n          >\n            <option disabled value="">Select a class</option>\n            <option v-for="cls in classes" :key="cls.id" :value="cls.id">\n              {{ cls.name }}\n            </option>\n          </select>\n        </div>\n        <button\n          type="submit"\n          :disabled="isSubmitting"\n          class="bg-primary text-white px-4 py-2 rounded w-full disabled:opacity-50"\n        >\n          {{ isSubmitting ? \'Adding...\' : \'Add Child\' }}\n        </button>\n      </form>\n  \n      <!-- Display Success or Error Messages -->\n      <div v-if="successMessage" class="mt-4 text-green-500">\n        {{ successMessage }}\n      </div>\n      <div v-if="errorMessage" class="mt-4 text-red-500">\n        {{ errorMessage }}\n      </div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, onMounted } from \'vue\'\n  import axios from \'axios\'\n  import { useStore } from \'vuex\'\n  import { useToast } from \'vue-toastification\'\n  \n  const emit = defineEmits([\'childAdded\'])\n  \n  const store = useStore()\n  const toast = useToast()\n  \n  const firstName = ref(\'\')\n  const lastName = ref(\'\')\n  const selectedClassId = ref(\'\')\n  const classes = ref([])\n  \n  const isSubmitting = ref(false)\n  const successMessage = ref(\'\')\n  const errorMessage = ref(\'\')\n  \n  // Fetch classes when component is mounted\n  const fetchClasses = async () => {\n    try {\n      const res = await axios.get(\'/classes\', {\n        headers: {\n          Authorization: `Bearer ${store.state.token}`\n        }\n      })\n      classes.value = res.data\n    } catch (err) {\n      console.error(\'Error fetching classes:\', err)\n      errorMessage.value = \'Failed to load classes. Please try again later.\'\n      toast.error(\'Failed to load classes.\')\n    }\n  }\n  \n  onMounted(() => {\n    fetchClasses()\n  })\n  \n  const handleSubmit = async () => {\n    // Reset messages\n    successMessage.value = \'\'\n    errorMessage.value = \'\'\n  \n    // Simple front-end validation\n    if (!firstName.value || !lastName.value || !selectedClassId.value) {\n      errorMessage.value = \'All fields are required.\'\n      toast.error(\'All fields are required.\')\n      return\n    }\n  \n    isSubmitting.value = true\n  \n    try {\n      // Fetch the logged-in parent data\n      const me = await axios.get(\'/users/me\', {\n        headers: { Authorization: `Bearer ${store.state.token}` }\n      })\n  \n      // Send a POST request to add the child\n      const res = await axios.post(\n        \'/children\',\n        {\n          parent_id: me.data.id,\n          first_name: firstName.value,\n          last_name: lastName.value,\n          class_id: selectedClassId.value\n        },\n        {\n          headers: { Authorization: `Bearer ${store.state.token}` }\n        }\n      )\n  \n      // Clear form\n      firstName.value = \'\'\n      lastName.value = \'\'\n      selectedClassId.value = \'\'\n  \n      successMessage.value = \'Child added successfully!\'\n      toast.success(\'Child added successfully!\')\n  \n      emit(\'childAdded\', res.data) // Notify parent component if needed\n    } catch (err) {\n      console.error(\'Error adding child:\', err)\n      if (err.response && err.response.data && err.response.data.detail) {\n        errorMessage.value = err.response.data.detail\n        toast.error(err.response.data.detail)\n      } else {\n        errorMessage.value = \'Failed to add child. Please try again.\'\n        toast.error(\'Failed to add child. Please try again.\')\n      }\n    } finally {\n      isSubmitting.value = false\n    }\n  }\n  </script>\n  \n  <style scoped>\n  /* Add any component-specific styles here */\n  </style>\n  ',
  "vue_js_project/src/layouts/DefaultLayout.vue": # filename: vue_js_project/src/layouts/DefaultLayout.vue\n'<!-- filename: vue_js_project/src/layouts/DefaultLayout.vue -->\n<template>\n  <div class="container mx-auto p-4">\n    <slot />\n  </div>\n</template>\n\n<script setup>\n</script>\n',
  "vue_js_project/src/assets/tailwind.css": # filename: vue_js_project/src/assets/tailwind.css\n'/* filename: vue_js_project/src/assets/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Additional custom styles can go here. */\n',
  "vue_js_project/src/pages/RegisterPage.vue": # filename: vue_js_project/src/pages/RegisterPage.vue\n'<!-- filename: vue_js_project/src/pages/RegisterPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4 text-gray-900 dark:text-gray-100">Register</h1>\n\n      <form @submit.prevent="register">\n        <input\n          v-model="username"\n          placeholder="Username"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          required\n        />\n        <input\n          v-model="firstName"\n          placeholder="First Name"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          required\n        />\n        <input\n          v-model="lastName"\n          placeholder="Last Name"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          required\n        />\n        <input\n          v-model="email"\n          type="email"\n          placeholder="Email"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          required\n        />\n        <input\n          v-model="password"\n          type="password"\n          placeholder="Password"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          required\n          minlength="8"\n          title="Password must be at least 8 characters long and include letters, numbers, and symbols."\n        />\n        <select\n          v-model="role"\n          class="w-full mb-4 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          required\n        >\n          <option disabled value="">Select Role</option>\n          <option value="teacher">Teacher</option>\n          <option value="parent">Parent</option>\n        </select>\n        <button\n          type="submit"\n          class="bg-primary text-white w-full p-2 rounded"\n          :disabled="isSubmitting"\n        >\n          {{ isSubmitting ? \'Registering...\' : \'Register\' }}\n        </button>\n      </form>\n\n      <div v-if="successMessage" class="mt-4 text-green-500">\n        {{ successMessage }}\n      </div>\n      <div v-if="errorMessage" class="mt-4 text-red-500">\n        {{ errorMessage }}\n      </div>\n\n      <div class="mt-4 text-center">\n        <p class="text-gray-600 dark:text-gray-400">\n          Already have an account?\n          <a href="/login" class="text-primary hover:underline">Login here</a>\n        </p>\n      </div>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref } from \'vue\' // Import ref from Vue\nimport axios from \'axios\'\nimport DefaultLayout from \'../layouts/DefaultLayout.vue\'\nimport { useStore } from \'vuex\'\nimport { setAuthToken } from \'../plugins/axios.js\' // Ensure this function is exported\n\nconst store = useStore()\n\n// Reactive state variables\nconst username = ref(\'\')\nconst firstName = ref(\'\')\nconst lastName = ref(\'\')\nconst email = ref(\'\')\nconst password = ref(\'\')\nconst role = ref(\'\')\nconst isSubmitting = ref(false)\nconst successMessage = ref(\'\')\nconst errorMessage = ref(\'\')\n\n// Registration function\nasync function register() {\n  // Reset messages\n  successMessage.value = \'\'\n  errorMessage.value = \'\'\n\n  // Frontend Validation\n  if (\n    !username.value ||\n    !firstName.value ||\n    !lastName.value ||\n    !email.value ||\n    !password.value ||\n    !role.value\n  ) {\n    errorMessage.value = \'All fields are required.\'\n    return\n  }\n\n  isSubmitting.value = true\n\n  try {\n    // Make the registration request\n    await axios.post(\'/users\', {\n      username: username.value,\n      first_name: firstName.value,\n      last_name: lastName.value,\n      email: email.value,\n      password: password.value,\n      role: role.value\n    })\n\n    // After successful registration, perform auto-login\n    const loginResponse = await axios.post(\'/auth/login\', {\n      username: username.value, // Assuming username is used for login\n      password: password.value\n    })\n\n    const token = loginResponse.data.access_token\n\n    // Store the token using your Axios plugin\n    setAuthToken(token)\n\n    // Decode the token to extract role and user_id\n    const tokenData = parseJwt(token)\n\n    // Update Vuex store with auth details\n    store.commit(\'setAuth\', { token, role: tokenData.role })\n\n    // Show success message\n    successMessage.value = \'Registration successful! Redirecting to dashboard...\'\n\n    // Redirect based on role after a short delay\n    setTimeout(() => {\n      redirectByRole(tokenData.role)\n    }, 2000)\n  } catch (error) {\n    console.error(\'Registration or login failed:\', error)\n    if (error.response && error.response.data && error.response.data.detail) {\n      errorMessage.value = error.response.data.detail\n    } else {\n      errorMessage.value = \'An unexpected error occurred. Please try again.\'\n    }\n  } finally {\n    isSubmitting.value = false\n  }\n}\n\n// Function to decode JWT token\nfunction parseJwt(token) {\n  try {\n    const base64Url = token.split(\'.\')[1]\n    const base64 = base64Url.replace(/-/g, \'+\').replace(/_/g, \'/\')\n    const jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split(\'\')\n        .map(function(c) {\n          return \'%\' + (\'00\' + c.charCodeAt(0).toString(16)).slice(-2)\n        })\n        .join(\'\')\n    )\n    return JSON.parse(jsonPayload)\n  } catch (e) {\n    console.error(\'Failed to parse JWT:\', e)\n    return {}\n  }\n}\n\n// Function to redirect based on user role\nfunction redirectByRole(role) {\n  if (role === \'teacher\') {\n    location.href = \'/teacher\'\n  } else if (role === \'parent\' || role === \'class_rep\') {\n    location.href = \'/parent\'\n  } else if (role === \'admin\') {\n    location.href = \'/admin\'\n  } else {\n    // Default redirect if role is unrecognized\n    location.href = \'/\'\n  }\n}\n</script>\n\n<style scoped>\n/* Add any component-specific styles here */\n</style>\n',
  "vue_js_project/src/pages/LoginPage.vue": # filename: vue_js_project/src/pages/LoginPage.vue\n'<!-- filename: vue_js_project/src/pages/LoginPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4 text-gray-900 dark:text-gray-100">Login</h1>\n      <form @submit.prevent="login">\n        <input\n          v-model="username"\n          placeholder="Username or Email"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="username"\n        />\n        <input\n          v-model="password"\n          type="password"\n          placeholder="Password"\n          class="w-full mb-4 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="current-password"\n        />\n        <button type="submit" class="bg-primary text-white w-full p-2 rounded">\n          Login\n        </button>\n      </form>\n      <div class="mt-4 text-center">\n        <p class="text-gray-600 dark:text-gray-400">\n          Don\'t have an account?\n          <a href="/register" class="text-primary hover:underline">Register here</a>\n        </p>\n      </div>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref } from \'vue\';\nimport { useStore } from \'vuex\';\nimport axios, { setAuthToken } from \'../plugins/axios.js\';\nimport DefaultLayout from \'../layouts/DefaultLayout.vue\';\n\nconst store = useStore();\nconst username = ref(\'\');\nconst password = ref(\'\');\n\nasync function login() {\n  try {\n    const res = await axios.post(\'/auth/login\', { username: username.value, password: password.value });\n    const token = res.data.access_token;\n\n    setAuthToken(token);\n\n    const tokenData = parseJwt(token);\n    store.commit(\'setAuth\', { token, role: tokenData.role });\n\n    redirectByRole();\n  } catch (err) {\n    console.error(\'Login failed:\', err);\n  }\n}\n\nfunction parseJwt(token) {\n  const base64Url = token.split(\'.\')[1];\n  return JSON.parse(decodeURIComponent(atob(base64Url).split(\'\').map(c => {\n    return \'%\' + (\'00\' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(\'\')));\n}\n\nfunction redirectByRole() {\n  if (store.state.role === \'teacher\') location.href = \'/teacher\';\n  else if (store.state.role === \'parent\' || store.state.role === \'class_rep\') location.href = \'/parent\';\n  else if (store.state.role === \'admin\') location.href = \'/admin\';\n}\n</script>\n',
  "vue_js_project/src/pages/DashboardTeacher.vue": # filename: vue_js_project/src/pages/DashboardTeacher.vue\n'<!-- filename: src/pages/DashboardTeacher.vue -->\n<template>\n  <DefaultLayout>\n    <div class="flex flex-col space-y-6">\n      <!-- Assigned Classes Section -->\n      <section>\n        <h1 class="text-2xl font-bold mb-4">My Classes</h1>\n        <div v-if="loadingClasses">\n          <p class="italic">Loading classes...</p>\n        </div>\n        <div v-else>\n          <div v-if="classes.length === 0">\n            <p class="italic">No classes assigned.</p>\n          </div>\n          <ul class="list-disc list-inside">\n            <li v-for="cls in classes" :key="cls.id" class="text-lg">\n              {{ cls.name }}\n            </li>\n          </ul>\n        </div>\n      </section>\n\n      <!-- Create Announcement Section -->\n      <section>\n        <h1 class="text-2xl font-bold mb-4">Create Announcement</h1>\n        <AnnouncementForm @announcementCreated="handleAnnouncementCreated" />\n      </section>\n\n      <!-- Announcements List Section -->\n      <section>\n        <h1 class="text-2xl font-bold mb-4">Announcements</h1>\n        <div v-if="loadingAnnouncements">\n          <p class="italic">Loading announcements...</p>\n        </div>\n        <div v-else>\n          <div v-if="announcements.length === 0">\n            <p class="italic">No announcements yet.</p>\n          </div>\n          <AnnouncementCard\n            v-for="ann in announcements"\n            :key="ann.id"\n            :announcement="ann"\n            @edited="fetchAnnouncements"\n            @deleted="fetchAnnouncements"\n          />\n        </div>\n      </section>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref, onMounted } from \'vue\';\nimport axios from \'../plugins/axios.js\'\nimport { useStore } from \'vuex\';\nimport { useToast } from \'vue-toastification\';\nimport DefaultLayout from \'../layouts/DefaultLayout.vue\';\nimport AnnouncementForm from \'../components/AnnouncementForm.vue\';\nimport AnnouncementCard from \'../components/AnnouncementCard.vue\';\n\nconst store = useStore();\nconst toast = useToast();\n\n// State variables\nconst classes = ref([]);\nconst loadingClasses = ref(false);\n\nconst announcements = ref([]);\nconst loadingAnnouncements = ref(false);\n\n// Fetch assigned classes\nconst fetchClasses = async () => {\n  loadingClasses.value = true;\n  try {\n    const res = await axios.get(\'/teacher/my-classes\', {\n      headers: {\n        Authorization: `Bearer ${store.state.token}`,\n      },\n    });\n    classes.value = res.data;\n  } catch (err) {\n    console.error(\'Error fetching classes:\', err);\n    toast.error(\'Failed to load classes.\');\n  } finally {\n    loadingClasses.value = false;\n  }\n};\n\n// Fetch announcements\nconst fetchAnnouncements = async () => {\n  loadingAnnouncements.value = true;\n  try {\n    const res = await axios.get(\'/teacher/my-announcements\', {\n      headers: {\n        Authorization: `Bearer ${store.state.token}`,\n      },\n    });\n    announcements.value = res.data;\n  } catch (err) {\n    console.error(\'Error fetching announcements:\', err);\n    toast.error(\'Failed to load announcements.\');\n  } finally {\n    loadingAnnouncements.value = false;\n  }\n};\n\n// Handle new announcement creation\nconst handleAnnouncementCreated = () => {\n  fetchAnnouncements();\n  toast.success(\'Announcement created successfully!\');\n};\n\n// On component mount\nonMounted(() => {\n  fetchClasses();\n  fetchAnnouncements();\n});\n</script>\n\n<style scoped>\n/* Add any specific styles here */\n</style>\n',
  "vue_js_project/src/pages/DashboardAdmin.vue": # filename: vue_js_project/src/pages/DashboardAdmin.vue\n'<!-- filename: vue_js_project/src/pages/DashboardAdmin.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Admin Dashboard</h1>\n    <p>Manage users, roles, and classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from \'../layouts/DefaultLayout.vue\'\n</script>\n',
  "vue_js_project/src/pages/DashboardParent.vue": # filename: vue_js_project/src/pages/DashboardParent.vue\n'<!-- filename: src/pages/DashboardParent.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Parent Dashboard</h1>\n    <p>View announcements for your children’s classes.</p>\n\n    <!-- Announcements List -->\n    <div class="mt-8">\n      <h2 class="text-xl font-bold mb-2">Announcements</h2>\n      <div v-if="loadingAnnouncements">\n        <p class="italic">Loading announcements...</p>\n      </div>\n      <div v-else>\n        <div v-if="announcements.length === 0">\n          <p class="italic">No announcements yet.</p>\n        </div>\n        <AnnouncementCard\n          v-for="ann in announcements"\n          :key="ann.id"\n          :announcement="ann"\n        />\n      </div>\n    </div>\n\n    <!-- Children List -->\n    <div class="mt-8">\n      <h2 class="text-xl font-bold mb-2">My Children</h2>\n      <div v-if="loadingChildren">\n        <p class="italic">Loading children...</p>\n      </div>\n      <div v-else>\n        <div v-if="children.length === 0">\n          <p class="italic">No children registered yet.</p>\n        </div>\n        <ChildCard\n          v-for="child in children"\n          :key="child.id"\n          :firstName="child.first_name"\n          :lastName="child.last_name"\n          :className="child.class_.name" \n          :createdAt="child.created_at"\n        />\n      </div>\n    </div>\n\n    <!-- Add Child Component -->\n    <AddChild @childAdded="handleChildAdded" />\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref, onMounted } from \'vue\'\nimport axios from \'../plugins/axios.js\'\nimport DefaultLayout from \'../layouts/DefaultLayout.vue\'\nimport AnnouncementCard from \'../components/AnnouncementCard.vue\'\nimport ChildCard from \'../components/ChildCard.vue\'\nimport AddChild from \'../components/AddChild.vue\'\nimport { useStore } from \'vuex\'\nimport { useToast } from \'vue-toastification\'\n\nconst store = useStore()\nconst toast = useToast()\n\n// Announcements\nconst announcements = ref([])\nconst loadingAnnouncements = ref(false)\n\n// Children\nconst children = ref([])\nconst loadingChildren = ref(false)\n\n// Fetch announcements\nconst fetchAnnouncements = async () => {\n  loadingAnnouncements.value = true\n  try {\n    const res = await axios.get(\'/announcements/for_parent\', {\n      headers: {\n        Authorization: `Bearer ${store.state.token}`\n      }\n    })\n    announcements.value = res.data\n    console.log(\'Fetched Announcements:\', announcements.value) // Debugging\n  } catch (err) {\n    console.error(\'Error fetching parent announcements:\', err)\n    toast.error(\'Failed to load announcements.\')\n  } finally {\n    loadingAnnouncements.value = false\n  }\n}\n\n// Fetch children\nconst fetchChildren = async () => {\n  loadingChildren.value = true\n  try {\n    const res = await axios.get(\'/children/my\', {\n      headers: {\n        Authorization: `Bearer ${store.state.token}`\n      }\n    })\n    children.value = res.data\n    console.log(\'Fetched Children:\', children.value) // Debugging\n  } catch (err) {\n    console.error(\'Error fetching children:\', err)\n    toast.error(\'Failed to load children.\')\n  } finally {\n    loadingChildren.value = false\n  }\n}\n\n// On component mount\nonMounted(() => {\n  fetchAnnouncements()\n  fetchChildren()\n})\n\n// If a child is added, re-fetch announcements (if you want) and children\nconst handleChildAdded = () => {\n  toast.success(\'Child added successfully!\')\n  fetchAnnouncements()\n  fetchChildren()\n}\n</script>\n\n<style scoped>\n/* Add any component-specific styles here */\n</style>\n',
  "vue_js_project/src/pages/NotFound.vue": # filename: vue_js_project/src/pages/NotFound.vue\n'<!-- filename: src/pages/NotFound.vue -->\n<template>\n    <DefaultLayout>\n      <div class="flex flex-col items-center justify-center min-h-screen">\n        <h1 class="text-4xl font-bold mb-4">404 - Page Not Found</h1>\n        <p class="mb-4">The page you are looking for does not exist.</p>\n        <router-link to="/login" class="text-primary hover:underline">Go to Login</router-link>\n      </div>\n    </DefaultLayout>\n  </template>\n  \n  <script setup>\n  import DefaultLayout from \'@/layouts/DefaultLayout.vue\';\n  </script>\n  \n  <style scoped>\n  /* Add any specific styles here */\n  </style>\n  ',
  "vue_js_project/src/store/index.js": # filename: vue_js_project/src/store/index.js\n"// filename: src/store/index.js\nimport { createStore } from 'vuex';\nimport jwt_decode from 'jwt-decode'; // Install this package for decoding JWT\n\nconst store = createStore({\n  state: {\n    token: localStorage.getItem('accessToken') || null, // Rehydrate token from localStorage\n    role: localStorage.getItem('userRole') || null,     // Rehydrate role from localStorage\n    darkMode: localStorage.getItem('darkMode') === 'true', // Retrieve dark mode preference\n    tokenData: null, // Store decoded token data\n  },\n  mutations: {\n    setAuth(state, { token, role }) {\n      state.token = token;\n      state.role = role;\n\n      // Save token and role in localStorage\n      localStorage.setItem('accessToken', token);\n      localStorage.setItem('userRole', role);\n\n      // Decode token and store data\n      try {\n        state.tokenData = jwt_decode(token);\n      } catch (e) {\n        state.tokenData = null;\n      }\n    },\n    clearAuth(state) {\n      state.token = null;\n      state.role = null;\n      state.tokenData = null;\n\n      // Remove token and role from localStorage\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('userRole');\n    },\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode;\n      localStorage.setItem('darkMode', state.darkMode); // Save preference to localStorage\n    },\n    setDarkMode(state, value) {\n      state.darkMode = value;\n      localStorage.setItem('darkMode', value); // Save preference to localStorage\n    },\n    rehydrateAuth(state) {\n      const storedToken = localStorage.getItem('accessToken');\n      const storedRole = localStorage.getItem('userRole');\n\n      if (storedToken && storedRole) {\n        state.token = storedToken;\n        state.role = storedRole;\n\n        // Decode the token to extract additional data\n        try {\n          state.tokenData = jwt_decode(storedToken);\n        } catch (e) {\n          state.tokenData = null;\n        }\n      } else {\n        state.token = null;\n        state.role = null;\n        state.tokenData = null;\n      }\n    },\n  },\n  actions: {\n    login({ commit }, payload) {\n      commit('setAuth', payload);\n    },\n    logout({ commit }) {\n      commit('clearAuth');\n    },\n  },\n  getters: {\n    isAuthenticated: (state) => !!state.token,\n    getUserRole: (state) => state.role,\n    getUserId: (state) => state.tokenData?.user_id,\n  },\n});\n\nexport default store;\n",
}
