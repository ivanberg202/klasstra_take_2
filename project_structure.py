project_structure = {
  "project_structure.py": "# filename: project_structure.py\nproject_structure = {\n  "file_contents.txt": "# filename: file_contents.txt\n# FILE: file_contents.txt\n\n\n# FILE: python_project/app/seed.py\n# filename: app/seed.py\nimport sys\nimport os\n\n# Add the project root to sys.path to allow imports from 'app'\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nproject_root = os.path.abspath(os.path.join(current_dir, '..'))\nsys.path.insert(0, project_root)\n\nfrom app.core.database import SessionLocal\nfrom app.models.user import User\nfrom app.models.class_ import Class\nfrom app.models.child import Child\nfrom app.models.announcement import Announcement\nfrom app.core.security import hash_password\n\ndef seed():\n    db = SessionLocal()\n    try:\n        # Create an admin user if not exists\n        if not db.query(User).filter(User.username == "admin").first():\n            admin = User(\n                username="admin",\n                first_name="Admin",\n                last_name="User",\n                email="admin@example.com",\n                password_hash=hash_password("AdminSecurePass123!"),\n                role="admin",\n            )\n            db.add(admin)\n            db.commit()\n            print("Admin user created: admin / AdminSecurePass123!")\n        else:\n            print("Admin user already exists.")\n\n        # Create a teacher user if not exists\n        if not db.query(User).filter(User.username == "teacher1").first():\n            teacher = User(\n                username="teacher1",\n                first_name="John",\n                last_name="Doe",\n                email="john.doe@example.com",\n                password_hash=hash_password("TeacherPass123!"),\n                role="teacher",\n            )\n            db.add(teacher)\n            db.commit()\n            print("Teacher user created: teacher1 / TeacherPass123!")\n        else:\n            print("Teacher user already exists.")\n\n        # Create a parent user if not exists\n        if not db.query(User).filter(User.username == "parent1").first():\n            parent = User(\n                username="parent1",\n                first_name="Jane",\n                last_name="Smith",\n                email="jane.smith@example.com",\n                password_hash=hash_password("ParentPass123!"),\n                role="parent",\n            )\n            db.add(parent)\n            db.commit()\n            print("Parent user created: parent1 / ParentPass123!")\n        else:\n            print("Parent user already exists.")\n\n        # Create sample classes if not exists\n        sample_classes = ["Mathematics", "Science", "History", "Art", "Physical Education"]\n        class_objects = []\n        for class_name in sample_classes:\n            existing_class = db.query(Class).filter(Class.name == class_name).first()\n            if not existing_class:\n                cls = Class(name=class_name)\n                db.add(cls)\n                db.commit()\n                db.refresh(cls)\n                class_objects.append(cls)\n                print(f"Class '{class_name}' created.")\n            else:\n                class_objects.append(existing_class)\n                print(f"Class '{class_name}' already exists.")\n\n        # Retrieve parent and teacher users\n        parent_user = db.query(User).filter(User.username == "parent1").first()\n        teacher_user = db.query(User).filter(User.username == "teacher1").first()\n\n        # Create children for the parent\n        existing_children = db.query(Child).filter(Child.parent_id == parent_user.id).all()\n        if not existing_children:\n            child1 = Child(\n                parent_id=parent_user.id,\n                first_name="Alice",\n                last_name="Smith",\n                class_id=class_objects[0].id,  # Mathematics\n            )\n            child2 = Child(\n                parent_id=parent_user.id,\n                first_name="Bob",\n                last_name="Smith",\n                class_id=class_objects[1].id,  # Science\n            )\n            db.add_all([child1, child2])\n            db.commit()\n            print("Children Alice and Bob added for parent1.")\n        else:\n            print("Children already exist for parent1.")\n\n        # Create announcements from the teacher\n        existing_announcements = db.query(Announcement).filter(Announcement.created_by == teacher_user.id).all()\n        if not existing_announcements:\n            announcement1 = Announcement(\n                title="Welcome to Mathematics!",\n                body="We will start with algebra basics next week.",\n                created_by=teacher_user.id,\n                recipient_type="class",\n                recipient_id=class_objects[0].id,  # Mathematics\n            )\n            announcement2 = Announcement(\n                title="Science Fair Reminder",\n                body="Don't forget to register for the upcoming science fair.",\n                created_by=teacher_user.id,\n                recipient_type="class",\n                recipient_id=class_objects[1].id,  # Science\n            )\n            db.add_all([announcement1, announcement2])\n            db.commit()\n            print("Announcements created by teacher1.")\n        else:\n            print("Announcements already exist for teacher1.")\n\n    finally:\n        db.close()\n\nif __name__ == "__main__":\n    seed()\n\n\n# FILE: python_project/app/main.py\n# filename: app/main.py\nfrom fastapi import FastAPI\nfrom app.routers import auth, users, classes, announcements, children, admin\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.core.database import Base, engine\nfrom sqlalchemy import text, inspect\nfrom app.seed import seed  # Import the seed function\n\napp = FastAPI(title="Klasstra")\n\n\n# Reset the database schema on startup\nwith engine.connect() as connection:\n    connection = connection.execution_options(isolation_level="AUTOCOMMIT")  # Enable autocommit mode\n\n    inspector = inspect(engine)\n    tables = inspector.get_table_names()\n\n    if tables:\n        print("Dropping all tables except 'alembic_version'...")\n        for table in tables:\n            if table != "alembic_version":\n                connection.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))\n                print(f"Dropped table: {table}")\n        print("All applicable tables dropped.")\n    else:\n        print("No tables found. Skipping drop.")\n\n    print("Recreating tables...")\n    Base.metadata.create_all(engine)\n    print("Database tables created.")\n\n# Seed the database with sample data\nprint("Seeding the database with sample data...")\nseed()\nprint("Database seeding complete.")\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],  # Adjust this in production for security\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# Include API routers\napp.include_router(auth.router)\napp.include_router(users.router)\napp.include_router(classes.router)\napp.include_router(announcements.router)\napp.include_router(children.router)\napp.include_router(admin.router)\n\n\n# FILE: python_project/app/routers/auth.py\n# filename: app/routers/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.schemas.auth import LoginData, Token\nfrom app.core.database import get_db\nfrom app.core.security import verify_password\nfrom app.core.auth import create_access_token\nfrom app.models.user import User\n\nrouter = APIRouter(prefix="/auth", tags=["auth"])\n\n@router.post("/login", response_model=Token)\ndef login(data: LoginData, db: Session = Depends(get_db)):\n    user = db.query(User).filter((User.username==data.username)|(User.email==data.username)).first()\n    if not user or not verify_password(data.password, user.password_hash):\n        raise HTTPException(status_code=401, detail="Invalid credentials")\n    token = create_access_token({"sub": user.username, "role": user.role, "user_id": user.id})\n    return {"access_token": token}\n\n\n# FILE: python_project/app/routers/children.py\n# filename: app/routers/children.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.child import ChildBase, ChildOut\nfrom app.models.child import Child\nfrom app.models.class_ import Class\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import is_parent\n\nrouter = APIRouter(prefix="/children", tags=["children"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ChildOut)\ndef add_child(c: ChildBase, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not is_parent(payload.get("role")) or payload.get("user_id") != c.parent_id:\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    # Check if the class exists\n    cls = db.query(Class).filter(Class.id == c.class_id).first()\n    if not cls:\n        raise HTTPException(status_code=400, detail="Invalid class_id. Class does not exist.")\n\n    ch = Child(**c.dict())\n    db.add(ch)\n    db.commit()\n    db.refresh(ch)\n    return ch\n\n\n# FILE: python_project/app/routers/users.py\n# filename: app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.core.security import hash_password\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\n\nrouter = APIRouter(prefix="/users", tags=["users"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=UserOut)\ndef create_user(user_in: UserCreate, db: Session = Depends(get_db)):\n    if db.query(User).filter((User.username==user_in.username)|(User.email==user_in.email)).first():\n        raise HTTPException(status_code=400, detail="User exists")\n    user = User(\n        username=user_in.username,\n        first_name=user_in.first_name,\n        last_name=user_in.last_name,\n        email=user_in.email,\n        password_hash=hash_password(user_in.password),\n        role=user_in.role\n    )\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n\n@router.get("/me", response_model=UserOut)\ndef get_me(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    username = payload.get("sub")\n    user = db.query(User).filter(User.username==username).first()\n    if not user:\n        raise HTTPException(status_code=401, detail="Invalid token")\n    return user\n\n\n# FILE: python_project/app/routers/admin.py\n# filename: app/routers/admin.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.models.user import User\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/admin", tags=["admin"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.put("/user/{user_id}/class_rep")\ndef make_class_rep(user_id: int, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    user = db.query(User).filter(User.id==user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    user.role = "class_rep"\n    db.commit()\n    return {"detail": "User promoted to class_rep"}\n\n\n# FILE: python_project/app/routers/classes.py\n# filename: app/routers/classes.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.models.class_ import Class\nfrom app.schemas.class_ import ClassBase, ClassOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/classes", tags=["classes"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ClassOut)\ndef create_class(c: ClassBase, token: str=Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    cls = Class(name=c.name)\n    db.add(cls)\n    db.commit()\n    db.refresh(cls)\n    return cls\n\n@router.get("/", response_model=list[ClassOut])\ndef list_classes(db: Session = Depends(get_db)):\n    # No auth needed, or optionally add auth if required.\n    return db.query(Class).all()\n\n\n# FILE: python_project/app/routers/announcements.py\n# filename: app/routers/announcements.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.announcement import AnnouncementCreate, AnnouncementOut\nfrom app.models.announcement import Announcement\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_create_announcements\nfrom app.utils.rate_limit import check_rate_limit\n\nrouter = APIRouter(prefix="/announcements", tags=["announcements"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=AnnouncementOut)\ndef create_announcement(a: AnnouncementCreate, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    user_id = payload.get("user_id")\n    role = payload.get("role")\n    if not can_create_announcements(role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    if not check_rate_limit(user_id):\n        raise HTTPException(status_code=429, detail="Rate limit exceeded")\n    ann = Announcement(\n        title=a.title, body=a.body, created_by=user_id, last_updated_by=user_id,\n        recipient_type=a.recipient_type, recipient_id=a.recipient_id)\n    db.add(ann)\n    db.commit()\n    db.refresh(ann)\n    return ann\n\n\n# FILE: python_project/app/core/auth.py\n# filename: app/core/auth.py\nfrom datetime import datetime, timedelta\nfrom jose import jwt\nfrom app.core.config import settings\n\ndef create_access_token(data: dict, expires_delta: int = 3600):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(seconds=expires_delta)\n    to_encode.update({"exp": expire})\n    return jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)\n\n\n# FILE: python_project/app/core/config.py\n# filename: app/core/config.py\nimport os\nimport secrets\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Settings:\n    PROJECT_NAME: str = "Klasstra"\n    SQLALCHEMY_DATABASE_URI: str = os.getenv("DATABASE_URL", "postgresql+psycopg2://YOUR_DB_CONNECTION_STRING")\n    \n    # If JWT_SECRET is not provided, generate one securely.\n    jwt_secret_env = os.getenv("JWT_SECRET")\n    if not jwt_secret_env or jwt_secret_env.strip() == "":\n        # Generate a 43-character URL-safe secret (≈256 bits)\n        jwt_secret_env = secrets.token_urlsafe(32)\n        \n    JWT_SECRET: str = jwt_secret_env\n    JWT_ALGORITHM: str = os.getenv("JWT_ALGORITHM", "HS256")\n    RATE_LIMIT: int = 5 # announcements per minute per user\n\nsettings = Settings()\n\n\n# FILE: python_project/app/core/database.py\n# filename: app/core/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\n\nengine = create_engine(settings.SQLALCHEMY_DATABASE_URI, pool_pre_ping=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n# FILE: python_project/app/core/security.py\n# filename: app/core/security.py\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain: str, hashed: str) -> bool:\n    return pwd_context.verify(plain, hashed)\n\n\n# FILE: python_project/app/utils/roles.py\n# filename: app/utils/roles.py\ndef can_create_announcements(role: str) -> bool:\n    return role in ["teacher", "class_rep", "admin"]\n\ndef can_manage_users(role: str) -> bool:\n    return role == "admin"\n\ndef is_parent(role: str) -> bool:\n    return role in ["parent", "class_rep"]\n\n\n# FILE: python_project/app/utils/rate_limit.py\n# filename: app/utils/rate_limit.py\nfrom collections import defaultdict\nfrom time import time\nfrom app.core.config import settings\n\nrates = defaultdict(list)\n\ndef check_rate_limit(user_id: int) -> bool:\n    now = time()\n    rates[user_id] = [t for t in rates[user_id] if t > now - 60]\n    if len(rates[user_id]) >= settings.RATE_LIMIT:\n        return False\n    rates[user_id].append(now)\n    return True\n\n\n# FILE: python_project/app/models/user.py\n# filename: app/models/user.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\n# Roles: "teacher", "parent", "admin", "class_rep"\nclass User(Base):\n    __tablename__ = "users"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True, nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)\n    password_hash = Column(String, nullable=False)\n    role = Column(String, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n\n# FILE: python_project/app/models/child.py\n# filename: app/models/child.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Child(Base):\n    __tablename__ = "children"\n    id = Column(Integer, primary_key=True, index=True)\n    parent_id = Column(Integer, ForeignKey("users.id"), nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    class_id = Column(Integer, ForeignKey("classes.id"), nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n\n# FILE: python_project/app/models/announcement.py\n# filename: app/models/announcement.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Announcement(Base):\n    __tablename__ = "announcements"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n    created_by = Column(Integer, ForeignKey("users.id"), nullable=False)\n    last_updated_by = Column(Integer, ForeignKey("users.id"), nullable=True)\n    recipient_type = Column(String, nullable=False) # "class" or "parent"\n    recipient_id = Column(Integer, nullable=False)   # class_id or user_id\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n\n# FILE: python_project/app/models/audit_log.py\n# filename: app/models/audit_log.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass AuditLog(Base):\n    __tablename__ = "audit_logs"\n    id = Column(Integer, primary_key=True, index=True)\n    entity_type = Column(String, nullable=False)\n    entity_id = Column(Integer, nullable=False)\n    action = Column(String, nullable=False)\n    performed_by = Column(Integer, ForeignKey("users.id"))\n    timestamp = Column(DateTime(timezone=True), server_default=func.now())\n\n\n# FILE: python_project/app/models/class_.py\n# filename: app/models/class_.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Class(Base):\n    __tablename__ = "classes"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n\n# FILE: python_project/app/schemas/auth.py\n# filename: app/schemas/auth.py\nfrom pydantic import BaseModel\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = "bearer"\n\nclass LoginData(BaseModel):\n    username: str\n    password: str\n\n\n# FILE: python_project/app/schemas/user.py\n# filename: app/schemas/user.py\nfrom pydantic import BaseModel, EmailStr, constr, Field\nfrom app.schemas.common import Timestamped\n\nclass UserBase(BaseModel):\n    username: str = Field(..., min_length=3, max_length=20, pattern=r"^[a-zA-Z0-9_]+$",\n                          description="Username must be 3-20 characters long and contain only alphanumeric characters or underscores.")\n    first_name: str = Field(..., min_length=1, description="First name is required and must have at least 1 character.")\n    last_name: str = Field(..., min_length=1, description="Last name is required and must have at least 1 character.")\n    email: EmailStr = Field(..., description="A valid email address.")\n    role: str = Field(..., pattern=r"^(teacher|parent|admin|class_rep)$", \n                      description="Role must be one of: teacher, parent, admin, class_rep.")\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8, max_length=50, \n                          description="Password must be between 8 and 50 characters.")\n\nclass UserOut(UserBase, Timestamped):\n    id: int\n\n\n# FILE: python_project/app/schemas/common.py\n# filename: app/schemas/common.py\nfrom pydantic import BaseModel\nfrom datetime import datetime\n\nclass Timestamped(BaseModel):\n    created_at: datetime\n    updated_at: datetime | None\n    class Config:\n        from_attributes = True\n\n\n# FILE: python_project/app/schemas/child.py\n# filename: app/schemas/child.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ChildBase(BaseModel):\n    parent_id: int\n    first_name: str\n    last_name: str\n    class_id: int\n\nclass ChildOut(ChildBase, Timestamped):\n    id: int\n\n    class Config:\n        from_attributes = True\n\n\n# FILE: python_project/app/schemas/announcement.py\n# filename: app/schemas/announcement.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass AnnouncementBase(BaseModel):\n    title: str\n    body: str\n    recipient_type: str\n    recipient_id: int\n\nclass AnnouncementCreate(AnnouncementBase):\n    pass\n\nclass AnnouncementOut(AnnouncementBase, Timestamped):\n    id: int\n    created_by: int\n    last_updated_by: int | None\n\n\n# FILE: python_project/app/schemas/class_.py\n# filename: app/schemas/class_.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ClassBase(BaseModel):\n    name: str\n\nclass ClassOut(ClassBase, Timestamped):\n    id: int\n\n\n# FILE: vue_js_project/jsconfig.json\n{\n    "compilerOptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "moduleResolution": "node",\n      "baseUrl": ".",\n      "paths": {\n        "@/*": ["src/*"]\n      }\n    },\n    "include": ["src/**/*", "index.html"],\n    "exclude": ["node_modules", "dist"]\n  }\n\n# FILE: vue_js_project/index.html\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id="app"></div>\n  <script type="module" src="/src/main.js"></script>\n</body>\n</html>\n\n\n# FILE: vue_js_project/tailwind.config.js\n// filename: vue_js_project/tailwind.config.js\nmodule.exports = {\n  content: ["./index.html","./src/**/*.{vue,js,ts,jsx,tsx}"],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: '#2563eb',\n        secondary: '#9333ea'\n      }\n    },\n  },\n  plugins: [],\n}\n\n\n# FILE: vue_js_project/vite.config.js\n// vite.config.js\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n  plugins: [vue()],\n});\n\n\n# FILE: vue_js_project/README.md\n# vue_js_project\n\n## Project setup\n```\nnpm install\n```\n\n### Compiles and hot-reloads for development\n```\nnpm run serve\n```\n\n### Compiles and minifies for production\n```\nnpm run build\n```\n\n### Lints and fixes files\n```\nnpm run lint\n```\n\n### Customize configuration\nSee [Configuration Reference](https://cli.vuejs.org/config/).\n\n\n# FILE: vue_js_project/package.json\n{\n  "name": "vue_js_project",\n  "version": "1.0.0",\n  "description": "## Project setup ``` npm install ```",\n  "main": "postcss.config.js",\n  "dependencies": {\n    "acorn": "^8.14.0",\n    "ansi-regex": "^6.1.0",\n    "ansi-styles": "^6.2.1",\n    "any-promise": "^1.3.0",\n    "anymatch": "^3.1.3",\n    "arg": "^5.0.2",\n    "asynckit": "^0.4.0",\n    "autoprefixer": "^10.4.20",\n    "axios": "^1.7.9",\n    "balanced-match": "^1.0.2",\n    "binary-extensions": "^2.3.0",\n    "brace-expansion": "^2.0.1",\n    "braces": "^3.0.3",\n    "browserslist": "^4.24.3",\n    "buffer-from": "^1.1.2",\n    "camelcase-css": "^2.0.1",\n    "caniuse-lite": "^1.0.30001689",\n    "chokidar": "^3.6.0",\n    "color-convert": "^2.0.1",\n    "color-name": "^1.1.4",\n    "combined-stream": "^1.0.8",\n    "commander": "^4.1.1",\n    "cross-spawn": "^7.0.6",\n    "cssesc": "^3.0.0",\n    "csstype": "^3.1.3",\n    "delayed-stream": "^1.0.0",\n    "didyoumean": "^1.2.2",\n    "dlv": "^1.1.3",\n    "eastasianwidth": "^0.2.0",\n    "electron-to-chromium": "^1.5.74",\n    "emoji-regex": "^9.2.2",\n    "entities": "^4.5.0",\n    "esbuild": "^0.18.20",\n    "escalade": "^3.2.0",\n    "estree-walker": "^2.0.2",\n    "fast-glob": "^3.3.2",\n    "fastq": "^1.17.1",\n    "fill-range": "^7.1.1",\n    "follow-redirects": "^1.15.9",\n    "foreground-child": "^3.3.0",\n    "form-data": "^4.0.1",\n    "fraction.js": "^4.3.7",\n    "fsevents": "^2.3.3",\n    "function-bind": "^1.1.2",\n    "glob": "^10.4.5",\n    "glob-parent": "^6.0.2",\n    "hasown": "^2.0.2",\n    "is-binary-path": "^2.1.0",\n    "is-core-module": "^2.16.0",\n    "is-extglob": "^2.1.1",\n    "is-fullwidth-code-point": "^3.0.0",\n    "is-glob": "^4.0.3",\n    "is-number": "^7.0.0",\n    "isexe": "^2.0.0",\n    "jackspeak": "^3.4.3",\n    "jiti": "^1.21.7",\n    "jwt-decode": "^3.1.2",\n    "lilconfig": "^3.1.3",\n    "lines-and-columns": "^1.2.4",\n    "lru-cache": "^10.4.3",\n    "magic-string": "^0.30.17",\n    "merge2": "^1.4.1",\n    "micromatch": "^4.0.8",\n    "mime-db": "^1.52.0",\n    "mime-types": "^2.1.35",\n    "minimatch": "^9.0.5",\n    "minipass": "^7.1.2",\n    "mz": "^2.7.0",\n    "nanoid": "^3.3.8",\n    "node-releases": "^2.0.19",\n    "normalize-path": "^3.0.0",\n    "normalize-range": "^0.1.2",\n    "object-assign": "^4.1.1",\n    "object-hash": "^3.0.0",\n    "package-json-from-dist": "^1.0.1",\n    "path-key": "^3.1.1",\n    "path-parse": "^1.0.7",\n    "path-scurry": "^1.11.1",\n    "picocolors": "^1.1.1",\n    "picomatch": "^2.3.1",\n    "pify": "^2.3.0",\n    "pinia": "^2.3.0",\n    "pirates": "^4.0.6",\n    "postcss": "^8.4.49",\n    "postcss-import": "^15.1.0",\n    "postcss-js": "^4.0.1",\n    "postcss-load-config": "^4.0.2",\n    "postcss-nested": "^6.2.0",\n    "postcss-selector-parser": "^6.1.2",\n    "postcss-value-parser": "^4.2.0",\n    "proxy-from-env": "^1.1.0",\n    "queue-microtask": "^1.2.3",\n    "read-cache": "^1.0.0",\n    "readdirp": "^3.6.0",\n    "resolve": "^1.22.9",\n    "reusify": "^1.0.4",\n    "rollup": "^3.29.5",\n    "run-parallel": "^1.2.0",\n    "shebang-command": "^2.0.0",\n    "shebang-regex": "^3.0.0",\n    "signal-exit": "^4.1.0",\n    "source-map": "^0.6.1",\n    "source-map-js": "^1.2.1",\n    "source-map-support": "^0.5.21",\n    "string-width": "^5.1.2",\n    "string-width-cjs": "^4.2.3",\n    "strip-ansi": "^7.1.0",\n    "strip-ansi-cjs": "^6.0.1",\n    "sucrase": "^3.35.0",\n    "supports-preserve-symlinks-flag": "^1.0.0",\n    "tailwindcss": "^3.4.17",\n    "terser": "^5.37.0",\n    "thenify": "^3.3.1",\n    "thenify-all": "^1.6.0",\n    "to-regex-range": "^5.0.1",\n    "ts-interface-checker": "^0.1.13",\n    "undici-types": "^6.20.0",\n    "update-browserslist-db": "^1.1.1",\n    "util-deprecate": "^1.0.2",\n    "vue": "^3.5.13",\n    "vue-demi": "^0.14.10",\n    "vue-router": "^4.5.0",\n    "vuex": "^4.1.0",\n    "which": "^2.0.2",\n    "wrap-ansi": "^8.1.0",\n    "wrap-ansi-cjs": "^7.0.0",\n    "yaml": "^2.6.1"\n  },\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "serve": "vite preview"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "@vitejs/plugin-vue": "^5.2.1",\n    "vite": "^6.0.4"\n  }\n}\n\n\n# FILE: vue_js_project/postcss.config.js\n// filename: vue_js_project/postcss.config.js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n\n\n# FILE: vue_js_project/src/App.vue\n<!-- filename: vue_js_project/src/App.vue -->\n<template>\n  <div class="bg-white dark:bg-gray-900 min-h-screen text-gray-900 dark:text-white">\n    <Navbar />\n    <router-view />\n  </div>\n</template>\n\n<script setup>\nimport Navbar from './components/Navbar.vue'\n</script>\n\n<style scoped>\n</style>\n\n\n# FILE: vue_js_project/src/main.js\n// filename: vue_js_project/src/main.js\nimport { createApp, watch } from 'vue'\nimport App from './App.vue'\nimport './assets/tailwind.css'\nimport router from './router'\nimport store from './store'\nimport axios from './plugins/axios' // Import the Axios plugin\n\nconst app = createApp(App)\napp.use(router)\napp.use(store)\napp.mount('#app')\n\n// Handle dark mode (unchanged)\nwatch(\n  () => store.state.darkMode,\n  (newVal) => {\n    if (newVal) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  },\n  { immediate: true }\n)\n\n\n# FILE: vue_js_project/src/router.js\n// filename: vue_js_project/src/router.js\nimport { createRouter, createWebHistory } from 'vue-router'\nimport LoginPage from './pages/LoginPage.vue'\nimport RegisterPage from './pages/RegisterPage.vue'\nimport DashboardTeacher from './pages/DashboardTeacher.vue'\nimport DashboardParent from './pages/DashboardParent.vue'\nimport DashboardAdmin from './pages/DashboardAdmin.vue'\n\nconst routes = [\n  { path: '/', redirect: '/login' },\n  { path: '/login', component: LoginPage },\n  { path: '/register', component: RegisterPage },\n  { path: '/teacher', component: DashboardTeacher },\n  { path: '/parent', component: DashboardParent },\n  { path: '/admin', component: DashboardAdmin }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nexport default router\n\n\n# FILE: vue_js_project/src/plugins/axios.js\n// filename: vue_js_project/src/plugins/axios.js\nimport axios from 'axios';\n\n// Set your backend API base URL\naxios.defaults.baseURL = 'http://localhost:8000';\n\n// Function to set or remove the Authorization header\nexport function setAuthToken(token) {\n  if (token) {\n    console.log("Setting token in localStorage and Axios headers:", token);\n    localStorage.setItem('accessToken', token);\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    console.log("Removing token from localStorage and Axios headers");\n    localStorage.removeItem('accessToken');\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\n// Initialize the Authorization header if token exists in localStorage\nconst storedToken = localStorage.getItem('accessToken');\nif (storedToken) {\n  console.log("Found token in localStorage, setting Axios Authorization header:", storedToken);\n  axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\n} else {\n  console.log("No token found in localStorage");\n}\n\nexport default axios;\n\n\n# FILE: vue_js_project/src/components/Navbar.vue\n<!-- filename: vue_js_project/src/components/Navbar.vue -->\n<template>\n  <nav class="p-4 flex justify-between items-center bg-primary dark:bg-gray-800">\n    <div class="text-white font-bold">Klasstra</div>\n    <div class="flex items-center space-x-4">\n      <ThemeToggle />\n      <button @click="logout" class="bg-white text-black px-3 py-1 rounded">Logout</button>\n    </div>\n  </nav>\n</template>\n\n<script setup>\nimport { useStore } from 'vuex'\nimport ThemeToggle from './ThemeToggle.vue'\nconst store = useStore()\n\nfunction logout() {\n  store.commit('setAuth', {token:null, role:null})\n  location.href = '/login'\n}\n</script>\n\n\n# FILE: vue_js_project/src/components/AnnouncementCard.vue\n<!-- filename: vue_js_project/src/components/AnnouncementCard.vue -->\n<template>\n  <div class="border rounded p-4 shadow mb-4 bg-white dark:bg-gray-800 dark:text-white">\n    <h2 class="font-bold text-lg">{{ title }}</h2>\n    <p class="mt-2">{{ body }}</p>\n    <small class="text-gray-500 dark:text-gray-400">By: {{ createdBy }} • {{ createdAt }}</small>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps } from 'vue'\ndefineProps({\n  title: String,\n  body: String,\n  createdBy: String,\n  createdAt: String\n})\n</script>\n\n\n# FILE: vue_js_project/src/components/HelloWorld.vue\n<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n    <p>\n      For a guide and recipes on how to configure / customize this project,<br>\n      check out the\n      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.\n    </p>\n    <h3>Installed CLI Plugins</h3>\n    <ul>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>\n    </ul>\n    <h3>Essential Links</h3>\n    <ul>\n      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>\n      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>\n      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>\n      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>\n      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>\n    </ul>\n    <h3>Ecosystem</h3>\n    <ul>\n      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>\n      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>\n      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>\n      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>\n      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n\n\n# FILE: vue_js_project/src/components/ThemeToggle.vue\n<!-- ThemeToggle.vue -->\n<template>\n  <button @click="toggle" class="px-3 py-1 bg-secondary text-white rounded">\n    {{ isDark ? 'Light Mode' : 'Dark Mode' }}\n  </button>\n</template>\n\n<script setup>\nimport { computed } from 'vue'; // Import computed\nimport { useStore } from 'vuex';\n\nconst store = useStore();\nconst isDark = computed(() => store.state.darkMode);\n\nfunction toggle() {\n  store.commit('toggleDarkMode');\n}\n</script>\n\n\n# FILE: vue_js_project/src/layouts/DefaultLayout.vue\n<!-- filename: vue_js_project/src/layouts/DefaultLayout.vue -->\n<template>\n  <div class="container mx-auto p-4">\n    <slot />\n  </div>\n</template>\n\n<script setup>\n</script>\n\n\n# FILE: vue_js_project/src/assets/tailwind.css\n/* filename: vue_js_project/src/assets/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Additional custom styles can go here. */\n\n\n# FILE: vue_js_project/src/pages/RegisterPage.vue\n<!-- filename: vue_js_project/src/pages/RegisterPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4">Register</h1>\n      <input v-model="username" placeholder="Username" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="firstName" placeholder="First Name" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="lastName" placeholder="Last Name" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="email" placeholder="Email" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="password" type="password" placeholder="Password" class="w-full mb-2 p-2 border rounded"/>\n      <select v-model="role" class="w-full mb-4 p-2 border rounded">\n        <option value="teacher">Teacher</option>\n        <option value="parent">Parent</option>\n      </select>\n      <button @click="register" class="bg-primary text-white w-full p-2 rounded">Register</button>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport axios from 'axios'\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\nconst username = ref('')\nconst firstName = ref('')\nconst lastName = ref('')\nconst email = ref('')\nconst password = ref('')\nconst role = ref('parent')\n\nasync function register(){\n  await axios.post('/users', {\n    username: username.value,\n    first_name: firstName.value,\n    last_name: lastName.value,\n    email: email.value,\n    password: password.value,\n    role: role.value\n  })\n  location.href='/login'\n}\n</script>\n\n\n# FILE: vue_js_project/src/pages/LoginPage.vue\n<!-- filename: vue_js_project/src/pages/LoginPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4">Login</h1>\n      <form @submit.prevent="login">\n        <input\n          v-model="username"\n          placeholder="Username or Email"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="username"\n        />\n        <input\n          v-model="password"\n          type="password"\n          placeholder="Password"\n          class="w-full mb-4 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="current-password"\n        />\n        <button type="submit" class="bg-primary text-white w-full p-2 rounded">\n          Login\n        </button>\n      </form>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport axios, { setAuthToken } from '../plugins/axios.js'; // Import setAuthToken\nimport DefaultLayout from '../layouts/DefaultLayout.vue';\n\nconst store = useStore();\nconst username = ref('');\nconst password = ref('');\n\nasync function login() {\n  try {\n    const res = await axios.post('/auth/login', { username: username.value, password: password.value });\n    const token = res.data.access_token;\n\n    // Use setAuthToken to store the token and set Axios header\n    setAuthToken(token);\n\n    const tokenData = parseJwt(token);\n    store.commit('setAuth', { token, role: tokenData.role });\n\n    redirectByRole();\n  } catch (err) {\n    console.error('Login failed:', err);\n  }\n}\n\nfunction parseJwt(token) {\n  const base64Url = token.split('.')[1];\n  return JSON.parse(decodeURIComponent(atob(base64Url).split('').map(c => {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join('')));\n}\n\nfunction redirectByRole() {\n  if (store.state.role === 'teacher') location.href = '/teacher';\n  else if (store.state.role === 'parent' || store.state.role === 'class_rep') location.href = '/parent';\n  else if (store.state.role === 'admin') location.href = '/admin';\n}\n</script>\n\n\n# FILE: vue_js_project/src/pages/DashboardTeacher.vue\n<!-- filename: vue_js_project/src/pages/DashboardTeacher.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Teacher Dashboard</h1>\n    <p>Welcome, Teacher. Create and manage announcements for your classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n\n\n# FILE: vue_js_project/src/pages/DashboardAdmin.vue\n<!-- filename: vue_js_project/src/pages/DashboardAdmin.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Admin Dashboard</h1>\n    <p>Manage users, roles, and classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n\n\n# FILE: vue_js_project/src/pages/DashboardParent.vue\n<!-- filename: vue_js_project/src/pages/DashboardParent.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Parent Dashboard</h1>\n    <p>View announcements for your children’s classes.</p>\n\n    <!-- Add Child Form -->\n    <div class="mt-8 p-4 border rounded bg-white dark:bg-gray-800">\n      <h2 class="text-xl font-bold mb-4">Add a Child</h2>\n      <div class="mb-2">\n        <input v-model="firstName" placeholder="Child's First Name" class="w-full p-2 border rounded mb-2" />\n        <input v-model="lastName" placeholder="Child's Last Name" class="w-full p-2 border rounded mb-2" />\n        \n        <select v-model="selectedClassId" class="w-full p-2 border rounded mb-4">\n          <option disabled value="">Select a class</option>\n          <option v-for="cls in classes" :key="cls.id" :value="cls.id">\n            {{ cls.name }}\n          </option>\n        </select>\n        \n        <button @click="addChild" class="bg-primary text-white px-4 py-2 rounded">\n          Add Child\n        </button>\n      </div>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport DefaultLayout from '../layouts/DefaultLayout.vue';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\nconst firstName = ref('');\nconst lastName = ref('');\nconst selectedClassId = ref('');\nconst classes = ref([]);\n\nonMounted(async () => {\n  try {\n    console.log("Fetching classes...");\n    const res = await axios.get('/classes');\n    console.log("Classes fetched:", res.data);\n    classes.value = res.data;\n  } catch (err) {\n    console.error("Error fetching classes:", err);\n  }\n});\n\nasync function addChild() {\n  try {\n    console.log("Attempting to fetch current user...");\n    console.log("Authorization token:", store.state.token);\n\n    const me = await axios.get('/users/me', {\n      headers: { Authorization: `Bearer ${store.state.token}` }\n    });\n\n    console.log("Current user data:", me.data);\n\n    console.log("Adding child with details:", {\n      parent_id: me.data.id,\n      first_name: firstName.value,\n      last_name: lastName.value,\n      class_id: selectedClassId.value\n    });\n\n    const res = await axios.post(\n      '/children',\n      {\n        parent_id: me.data.id,\n        first_name: firstName.value,\n        last_name: lastName.value,\n        class_id: selectedClassId.value\n      },\n      {\n        headers: { Authorization: `Bearer ${store.state.token}` }\n      }\n    );\n\n    console.log("Child added successfully:", res.data);\n\n    // Clear form\n    firstName.value = '';\n    lastName.value = '';\n    selectedClassId.value = '';\n  } catch (err) {\n    console.error("Error adding child:", err);\n  }\n}\n</script>\n\n\n# FILE: vue_js_project/src/store/index.js\n// filename: vue_js_project/src/store/index.js\nimport { createStore } from 'vuex'\n\nconst store = createStore({\n  state: {\n    token: localStorage.getItem('accessToken') || null, // Rehydrate token from localStorage\n    role: null,\n    darkMode: false,\n  },\n  mutations: {\n    setAuth(state, { token, role }) {\n      state.token = token\n      state.role = role\n      // Save token to localStorage for persistence\n      localStorage.setItem('accessToken', token)\n    },\n    clearAuth(state) {\n      state.token = null\n      state.role = null\n      // Remove token from localStorage\n      localStorage.removeItem('accessToken')\n    },\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode\n    }\n  },\n  actions: {\n    login({ commit }, payload) {\n      commit('setAuth', payload)\n    },\n    logout({ commit }) {\n      commit('clearAuth')\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.token,\n    getUserRole: state => state.role,\n  }\n})\n\nexport default store\n\n\n",\n  "python_project/app/seed.py": "# filename: python_project/app/seed.py\n# filename: app/seed.py\nimport sys\nimport os\n\n# Add the project root to sys.path to allow imports from 'app'\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nproject_root = os.path.abspath(os.path.join(current_dir, '..'))\nsys.path.insert(0, project_root)\n\nfrom app.core.database import SessionLocal\nfrom app.models.user import User\nfrom app.models.class_ import Class\nfrom app.models.child import Child\nfrom app.models.announcement import Announcement\nfrom app.core.security import hash_password\n\ndef seed():\n    db = SessionLocal()\n    try:\n        # Create an admin user if not exists\n        if not db.query(User).filter(User.username == "admin").first():\n            admin = User(\n                username="admin",\n                first_name="Admin",\n                last_name="User",\n                email="admin@example.com",\n                password_hash=hash_password("AdminSecurePass123!"),\n                role="admin",\n            )\n            db.add(admin)\n            db.commit()\n            print("Admin user created: admin / AdminSecurePass123!")\n        else:\n            print("Admin user already exists.")\n\n        # Create a teacher user if not exists\n        if not db.query(User).filter(User.username == "teacher1").first():\n            teacher = User(\n                username="teacher1",\n                first_name="John",\n                last_name="Doe",\n                email="john.doe@example.com",\n                password_hash=hash_password("TeacherPass123!"),\n                role="teacher",\n            )\n            db.add(teacher)\n            db.commit()\n            print("Teacher user created: teacher1 / TeacherPass123!")\n        else:\n            print("Teacher user already exists.")\n\n        # Create a parent user if not exists\n        if not db.query(User).filter(User.username == "parent1").first():\n            parent = User(\n                username="parent1",\n                first_name="Jane",\n                last_name="Smith",\n                email="jane.smith@example.com",\n                password_hash=hash_password("ParentPass123!"),\n                role="parent",\n            )\n            db.add(parent)\n            db.commit()\n            print("Parent user created: parent1 / ParentPass123!")\n        else:\n            print("Parent user already exists.")\n\n        # Create sample classes if not exists\n        sample_classes = ["Mathematics", "Science", "History", "Art", "Physical Education"]\n        class_objects = []\n        for class_name in sample_classes:\n            existing_class = db.query(Class).filter(Class.name == class_name).first()\n            if not existing_class:\n                cls = Class(name=class_name)\n                db.add(cls)\n                db.commit()\n                db.refresh(cls)\n                class_objects.append(cls)\n                print(f"Class '{class_name}' created.")\n            else:\n                class_objects.append(existing_class)\n                print(f"Class '{class_name}' already exists.")\n\n        # Retrieve parent and teacher users\n        parent_user = db.query(User).filter(User.username == "parent1").first()\n        teacher_user = db.query(User).filter(User.username == "teacher1").first()\n\n        # Create children for the parent\n        existing_children = db.query(Child).filter(Child.parent_id == parent_user.id).all()\n        if not existing_children:\n            child1 = Child(\n                parent_id=parent_user.id,\n                first_name="Alice",\n                last_name="Smith",\n                class_id=class_objects[0].id,  # Mathematics\n            )\n            child2 = Child(\n                parent_id=parent_user.id,\n                first_name="Bob",\n                last_name="Smith",\n                class_id=class_objects[1].id,  # Science\n            )\n            db.add_all([child1, child2])\n            db.commit()\n            print("Children Alice and Bob added for parent1.")\n        else:\n            print("Children already exist for parent1.")\n\n        # Create announcements from the teacher\n        existing_announcements = db.query(Announcement).filter(Announcement.created_by == teacher_user.id).all()\n        if not existing_announcements:\n            announcement1 = Announcement(\n                title="Welcome to Mathematics!",\n                body="We will start with algebra basics next week.",\n                created_by=teacher_user.id,\n                recipient_type="class",\n                recipient_id=class_objects[0].id,  # Mathematics\n            )\n            announcement2 = Announcement(\n                title="Science Fair Reminder",\n                body="Don't forget to register for the upcoming science fair.",\n                created_by=teacher_user.id,\n                recipient_type="class",\n                recipient_id=class_objects[1].id,  # Science\n            )\n            db.add_all([announcement1, announcement2])\n            db.commit()\n            print("Announcements created by teacher1.")\n        else:\n            print("Announcements already exist for teacher1.")\n\n    finally:\n        db.close()\n\nif __name__ == "__main__":\n    seed()\n",\n  "python_project/app/main.py": "# filename: python_project/app/main.py\n# filename: app/main.py\nfrom fastapi import FastAPI\nfrom app.routers import auth, users, classes, announcements, children, admin\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.core.database import Base, engine\nfrom sqlalchemy import text, inspect\nfrom app.seed import seed  # Import the seed function\n\napp = FastAPI(title="Klasstra")\n\n\n# Reset the database schema on startup\nwith engine.connect() as connection:\n    connection = connection.execution_options(isolation_level="AUTOCOMMIT")  # Enable autocommit mode\n\n    inspector = inspect(engine)\n    tables = inspector.get_table_names()\n\n    if tables:\n        print("Dropping all tables except 'alembic_version'...")\n        for table in tables:\n            if table != "alembic_version":\n                connection.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))\n                print(f"Dropped table: {table}")\n        print("All applicable tables dropped.")\n    else:\n        print("No tables found. Skipping drop.")\n\n    print("Recreating tables...")\n    Base.metadata.create_all(engine)\n    print("Database tables created.")\n\n# Seed the database with sample data\nprint("Seeding the database with sample data...")\nseed()\nprint("Database seeding complete.")\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],  # Adjust this in production for security\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# Include API routers\napp.include_router(auth.router)\napp.include_router(users.router)\napp.include_router(classes.router)\napp.include_router(announcements.router)\napp.include_router(children.router)\napp.include_router(admin.router)\n",\n  "python_project/app/routers/auth.py": "# filename: python_project/app/routers/auth.py\n# filename: app/routers/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.schemas.auth import LoginData, Token\nfrom app.core.database import get_db\nfrom app.core.security import verify_password\nfrom app.core.auth import create_access_token\nfrom app.models.user import User\n\nrouter = APIRouter(prefix="/auth", tags=["auth"])\n\n@router.post("/login", response_model=Token)\ndef login(data: LoginData, db: Session = Depends(get_db)):\n    user = db.query(User).filter((User.username==data.username)|(User.email==data.username)).first()\n    if not user or not verify_password(data.password, user.password_hash):\n        raise HTTPException(status_code=401, detail="Invalid credentials")\n    token = create_access_token({"sub": user.username, "role": user.role, "user_id": user.id})\n    return {"access_token": token}\n",\n  "python_project/app/routers/children.py": "# filename: python_project/app/routers/children.py\n# filename: app/routers/children.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.child import ChildBase, ChildOut\nfrom app.models.child import Child\nfrom app.models.class_ import Class\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import is_parent\n\nrouter = APIRouter(prefix="/children", tags=["children"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ChildOut)\ndef add_child(c: ChildBase, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not is_parent(payload.get("role")) or payload.get("user_id") != c.parent_id:\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    # Check if the class exists\n    cls = db.query(Class).filter(Class.id == c.class_id).first()\n    if not cls:\n        raise HTTPException(status_code=400, detail="Invalid class_id. Class does not exist.")\n\n    ch = Child(**c.dict())\n    db.add(ch)\n    db.commit()\n    db.refresh(ch)\n    return ch\n",\n  "python_project/app/routers/users.py": "# filename: python_project/app/routers/users.py\n# filename: app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.core.security import hash_password\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\n\nrouter = APIRouter(prefix="/users", tags=["users"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=UserOut)\ndef create_user(user_in: UserCreate, db: Session = Depends(get_db)):\n    if db.query(User).filter((User.username==user_in.username)|(User.email==user_in.email)).first():\n        raise HTTPException(status_code=400, detail="User exists")\n    user = User(\n        username=user_in.username,\n        first_name=user_in.first_name,\n        last_name=user_in.last_name,\n        email=user_in.email,\n        password_hash=hash_password(user_in.password),\n        role=user_in.role\n    )\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n\n@router.get("/me", response_model=UserOut)\ndef get_me(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    username = payload.get("sub")\n    user = db.query(User).filter(User.username==username).first()\n    if not user:\n        raise HTTPException(status_code=401, detail="Invalid token")\n    return user\n",\n  "python_project/app/routers/admin.py": "# filename: python_project/app/routers/admin.py\n# filename: app/routers/admin.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.models.user import User\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/admin", tags=["admin"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.put("/user/{user_id}/class_rep")\ndef make_class_rep(user_id: int, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    user = db.query(User).filter(User.id==user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    user.role = "class_rep"\n    db.commit()\n    return {"detail": "User promoted to class_rep"}\n",\n  "python_project/app/routers/classes.py": "# filename: python_project/app/routers/classes.py\n# filename: app/routers/classes.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.models.class_ import Class\nfrom app.schemas.class_ import ClassBase, ClassOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/classes", tags=["classes"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ClassOut)\ndef create_class(c: ClassBase, token: str=Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    cls = Class(name=c.name)\n    db.add(cls)\n    db.commit()\n    db.refresh(cls)\n    return cls\n\n@router.get("/", response_model=list[ClassOut])\ndef list_classes(db: Session = Depends(get_db)):\n    # No auth needed, or optionally add auth if required.\n    return db.query(Class).all()\n",\n  "python_project/app/routers/announcements.py": "# filename: python_project/app/routers/announcements.py\n# filename: app/routers/announcements.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.announcement import AnnouncementCreate, AnnouncementOut\nfrom app.models.announcement import Announcement\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_create_announcements\nfrom app.utils.rate_limit import check_rate_limit\n\nrouter = APIRouter(prefix="/announcements", tags=["announcements"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=AnnouncementOut)\ndef create_announcement(a: AnnouncementCreate, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    user_id = payload.get("user_id")\n    role = payload.get("role")\n    if not can_create_announcements(role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    if not check_rate_limit(user_id):\n        raise HTTPException(status_code=429, detail="Rate limit exceeded")\n    ann = Announcement(\n        title=a.title, body=a.body, created_by=user_id, last_updated_by=user_id,\n        recipient_type=a.recipient_type, recipient_id=a.recipient_id)\n    db.add(ann)\n    db.commit()\n    db.refresh(ann)\n    return ann\n",\n  "python_project/app/core/auth.py": "# filename: python_project/app/core/auth.py\n# filename: app/core/auth.py\nfrom datetime import datetime, timedelta\nfrom jose import jwt\nfrom app.core.config import settings\n\ndef create_access_token(data: dict, expires_delta: int = 3600):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(seconds=expires_delta)\n    to_encode.update({"exp": expire})\n    return jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)\n",\n  "python_project/app/core/config.py": "# filename: python_project/app/core/config.py\n# filename: app/core/config.py\nimport os\nimport secrets\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Settings:\n    PROJECT_NAME: str = "Klasstra"\n    SQLALCHEMY_DATABASE_URI: str = os.getenv("DATABASE_URL", "postgresql+psycopg2://YOUR_DB_CONNECTION_STRING")\n    \n    # If JWT_SECRET is not provided, generate one securely.\n    jwt_secret_env = os.getenv("JWT_SECRET")\n    if not jwt_secret_env or jwt_secret_env.strip() == "":\n        # Generate a 43-character URL-safe secret (≈256 bits)\n        jwt_secret_env = secrets.token_urlsafe(32)\n        \n    JWT_SECRET: str = jwt_secret_env\n    JWT_ALGORITHM: str = os.getenv("JWT_ALGORITHM", "HS256")\n    RATE_LIMIT: int = 5 # announcements per minute per user\n\nsettings = Settings()\n",\n  "python_project/app/core/database.py": "# filename: python_project/app/core/database.py\n# filename: app/core/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\n\nengine = create_engine(settings.SQLALCHEMY_DATABASE_URI, pool_pre_ping=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n",\n  "python_project/app/core/security.py": "# filename: python_project/app/core/security.py\n# filename: app/core/security.py\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain: str, hashed: str) -> bool:\n    return pwd_context.verify(plain, hashed)\n",\n  "python_project/app/utils/roles.py": "# filename: python_project/app/utils/roles.py\n# filename: app/utils/roles.py\ndef can_create_announcements(role: str) -> bool:\n    return role in ["teacher", "class_rep", "admin"]\n\ndef can_manage_users(role: str) -> bool:\n    return role == "admin"\n\ndef is_parent(role: str) -> bool:\n    return role in ["parent", "class_rep"]\n",\n  "python_project/app/utils/rate_limit.py": "# filename: python_project/app/utils/rate_limit.py\n# filename: app/utils/rate_limit.py\nfrom collections import defaultdict\nfrom time import time\nfrom app.core.config import settings\n\nrates = defaultdict(list)\n\ndef check_rate_limit(user_id: int) -> bool:\n    now = time()\n    rates[user_id] = [t for t in rates[user_id] if t > now - 60]\n    if len(rates[user_id]) >= settings.RATE_LIMIT:\n        return False\n    rates[user_id].append(now)\n    return True\n",\n  "python_project/app/models/user.py": "# filename: python_project/app/models/user.py\n# filename: app/models/user.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\n# Roles: "teacher", "parent", "admin", "class_rep"\nclass User(Base):\n    __tablename__ = "users"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True, nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)\n    password_hash = Column(String, nullable=False)\n    role = Column(String, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",\n  "python_project/app/models/child.py": "# filename: python_project/app/models/child.py\n# filename: app/models/child.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Child(Base):\n    __tablename__ = "children"\n    id = Column(Integer, primary_key=True, index=True)\n    parent_id = Column(Integer, ForeignKey("users.id"), nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    class_id = Column(Integer, ForeignKey("classes.id"), nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",\n  "python_project/app/models/announcement.py": "# filename: python_project/app/models/announcement.py\n# filename: app/models/announcement.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Announcement(Base):\n    __tablename__ = "announcements"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n    created_by = Column(Integer, ForeignKey("users.id"), nullable=False)\n    last_updated_by = Column(Integer, ForeignKey("users.id"), nullable=True)\n    recipient_type = Column(String, nullable=False) # "class" or "parent"\n    recipient_id = Column(Integer, nullable=False)   # class_id or user_id\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",\n  "python_project/app/models/audit_log.py": "# filename: python_project/app/models/audit_log.py\n# filename: app/models/audit_log.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass AuditLog(Base):\n    __tablename__ = "audit_logs"\n    id = Column(Integer, primary_key=True, index=True)\n    entity_type = Column(String, nullable=False)\n    entity_id = Column(Integer, nullable=False)\n    action = Column(String, nullable=False)\n    performed_by = Column(Integer, ForeignKey("users.id"))\n    timestamp = Column(DateTime(timezone=True), server_default=func.now())\n",\n  "python_project/app/models/class_.py": "# filename: python_project/app/models/class_.py\n# filename: app/models/class_.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Class(Base):\n    __tablename__ = "classes"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",\n  "python_project/app/schemas/auth.py": "# filename: python_project/app/schemas/auth.py\n# filename: app/schemas/auth.py\nfrom pydantic import BaseModel\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = "bearer"\n\nclass LoginData(BaseModel):\n    username: str\n    password: str\n",\n  "python_project/app/schemas/user.py": "# filename: python_project/app/schemas/user.py\n# filename: app/schemas/user.py\nfrom pydantic import BaseModel, EmailStr, constr, Field\nfrom app.schemas.common import Timestamped\n\nclass UserBase(BaseModel):\n    username: str = Field(..., min_length=3, max_length=20, pattern=r"^[a-zA-Z0-9_]+$",\n                          description="Username must be 3-20 characters long and contain only alphanumeric characters or underscores.")\n    first_name: str = Field(..., min_length=1, description="First name is required and must have at least 1 character.")\n    last_name: str = Field(..., min_length=1, description="Last name is required and must have at least 1 character.")\n    email: EmailStr = Field(..., description="A valid email address.")\n    role: str = Field(..., pattern=r"^(teacher|parent|admin|class_rep)$", \n                      description="Role must be one of: teacher, parent, admin, class_rep.")\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8, max_length=50, \n                          description="Password must be between 8 and 50 characters.")\n\nclass UserOut(UserBase, Timestamped):\n    id: int\n",\n  "python_project/app/schemas/common.py": "# filename: python_project/app/schemas/common.py\n# filename: app/schemas/common.py\nfrom pydantic import BaseModel\nfrom datetime import datetime\n\nclass Timestamped(BaseModel):\n    created_at: datetime\n    updated_at: datetime | None\n    class Config:\n        from_attributes = True\n",\n  "python_project/app/schemas/child.py": "# filename: python_project/app/schemas/child.py\n# filename: app/schemas/child.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ChildBase(BaseModel):\n    parent_id: int\n    first_name: str\n    last_name: str\n    class_id: int\n\nclass ChildOut(ChildBase, Timestamped):\n    id: int\n\n    class Config:\n        from_attributes = True\n",\n  "python_project/app/schemas/announcement.py": "# filename: python_project/app/schemas/announcement.py\n# filename: app/schemas/announcement.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass AnnouncementBase(BaseModel):\n    title: str\n    body: str\n    recipient_type: str\n    recipient_id: int\n\nclass AnnouncementCreate(AnnouncementBase):\n    pass\n\nclass AnnouncementOut(AnnouncementBase, Timestamped):\n    id: int\n    created_by: int\n    last_updated_by: int | None\n",\n  "python_project/app/schemas/class_.py": "# filename: python_project/app/schemas/class_.py\n# filename: app/schemas/class_.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ClassBase(BaseModel):\n    name: str\n\nclass ClassOut(ClassBase, Timestamped):\n    id: int\n",\n  "vue_js_project/jsconfig.json": "# filename: vue_js_project/jsconfig.json\n{\n    "compilerOptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "moduleResolution": "node",\n      "baseUrl": ".",\n      "paths": {\n        "@/*": ["src/*"]\n      }\n    },\n    "include": ["src/**/*", "index.html"],\n    "exclude": ["node_modules", "dist"]\n  }",\n  "vue_js_project/index.html": "# filename: vue_js_project/index.html\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id="app"></div>\n  <script type="module" src="/src/main.js"></script>\n</body>\n</html>\n",\n  "vue_js_project/tailwind.config.js": "# filename: vue_js_project/tailwind.config.js\n// filename: vue_js_project/tailwind.config.js\nmodule.exports = {\n  content: ["./index.html","./src/**/*.{vue,js,ts,jsx,tsx}"],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: '#2563eb',\n        secondary: '#9333ea'\n      }\n    },\n  },\n  plugins: [],\n}\n",\n  "vue_js_project/vite.config.js": "# filename: vue_js_project/vite.config.js\n// vite.config.js\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n  plugins: [vue()],\n});\n",\n  "vue_js_project/README.md": "# filename: vue_js_project/README.md\n# vue_js_project\n\n## Project setup\n```\nnpm install\n```\n\n### Compiles and hot-reloads for development\n```\nnpm run serve\n```\n\n### Compiles and minifies for production\n```\nnpm run build\n```\n\n### Lints and fixes files\n```\nnpm run lint\n```\n\n### Customize configuration\nSee [Configuration Reference](https://cli.vuejs.org/config/).\n",\n  "vue_js_project/package.json": "# filename: vue_js_project/package.json\n{\n  "name": "vue_js_project",\n  "version": "1.0.0",\n  "description": "## Project setup ``` npm install ```",\n  "main": "postcss.config.js",\n  "dependencies": {\n    "acorn": "^8.14.0",\n    "ansi-regex": "^6.1.0",\n    "ansi-styles": "^6.2.1",\n    "any-promise": "^1.3.0",\n    "anymatch": "^3.1.3",\n    "arg": "^5.0.2",\n    "asynckit": "^0.4.0",\n    "autoprefixer": "^10.4.20",\n    "axios": "^1.7.9",\n    "balanced-match": "^1.0.2",\n    "binary-extensions": "^2.3.0",\n    "brace-expansion": "^2.0.1",\n    "braces": "^3.0.3",\n    "browserslist": "^4.24.3",\n    "buffer-from": "^1.1.2",\n    "camelcase-css": "^2.0.1",\n    "caniuse-lite": "^1.0.30001689",\n    "chokidar": "^3.6.0",\n    "color-convert": "^2.0.1",\n    "color-name": "^1.1.4",\n    "combined-stream": "^1.0.8",\n    "commander": "^4.1.1",\n    "cross-spawn": "^7.0.6",\n    "cssesc": "^3.0.0",\n    "csstype": "^3.1.3",\n    "delayed-stream": "^1.0.0",\n    "didyoumean": "^1.2.2",\n    "dlv": "^1.1.3",\n    "eastasianwidth": "^0.2.0",\n    "electron-to-chromium": "^1.5.74",\n    "emoji-regex": "^9.2.2",\n    "entities": "^4.5.0",\n    "esbuild": "^0.18.20",\n    "escalade": "^3.2.0",\n    "estree-walker": "^2.0.2",\n    "fast-glob": "^3.3.2",\n    "fastq": "^1.17.1",\n    "fill-range": "^7.1.1",\n    "follow-redirects": "^1.15.9",\n    "foreground-child": "^3.3.0",\n    "form-data": "^4.0.1",\n    "fraction.js": "^4.3.7",\n    "fsevents": "^2.3.3",\n    "function-bind": "^1.1.2",\n    "glob": "^10.4.5",\n    "glob-parent": "^6.0.2",\n    "hasown": "^2.0.2",\n    "is-binary-path": "^2.1.0",\n    "is-core-module": "^2.16.0",\n    "is-extglob": "^2.1.1",\n    "is-fullwidth-code-point": "^3.0.0",\n    "is-glob": "^4.0.3",\n    "is-number": "^7.0.0",\n    "isexe": "^2.0.0",\n    "jackspeak": "^3.4.3",\n    "jiti": "^1.21.7",\n    "jwt-decode": "^3.1.2",\n    "lilconfig": "^3.1.3",\n    "lines-and-columns": "^1.2.4",\n    "lru-cache": "^10.4.3",\n    "magic-string": "^0.30.17",\n    "merge2": "^1.4.1",\n    "micromatch": "^4.0.8",\n    "mime-db": "^1.52.0",\n    "mime-types": "^2.1.35",\n    "minimatch": "^9.0.5",\n    "minipass": "^7.1.2",\n    "mz": "^2.7.0",\n    "nanoid": "^3.3.8",\n    "node-releases": "^2.0.19",\n    "normalize-path": "^3.0.0",\n    "normalize-range": "^0.1.2",\n    "object-assign": "^4.1.1",\n    "object-hash": "^3.0.0",\n    "package-json-from-dist": "^1.0.1",\n    "path-key": "^3.1.1",\n    "path-parse": "^1.0.7",\n    "path-scurry": "^1.11.1",\n    "picocolors": "^1.1.1",\n    "picomatch": "^2.3.1",\n    "pify": "^2.3.0",\n    "pinia": "^2.3.0",\n    "pirates": "^4.0.6",\n    "postcss": "^8.4.49",\n    "postcss-import": "^15.1.0",\n    "postcss-js": "^4.0.1",\n    "postcss-load-config": "^4.0.2",\n    "postcss-nested": "^6.2.0",\n    "postcss-selector-parser": "^6.1.2",\n    "postcss-value-parser": "^4.2.0",\n    "proxy-from-env": "^1.1.0",\n    "queue-microtask": "^1.2.3",\n    "read-cache": "^1.0.0",\n    "readdirp": "^3.6.0",\n    "resolve": "^1.22.9",\n    "reusify": "^1.0.4",\n    "rollup": "^3.29.5",\n    "run-parallel": "^1.2.0",\n    "shebang-command": "^2.0.0",\n    "shebang-regex": "^3.0.0",\n    "signal-exit": "^4.1.0",\n    "source-map": "^0.6.1",\n    "source-map-js": "^1.2.1",\n    "source-map-support": "^0.5.21",\n    "string-width": "^5.1.2",\n    "string-width-cjs": "^4.2.3",\n    "strip-ansi": "^7.1.0",\n    "strip-ansi-cjs": "^6.0.1",\n    "sucrase": "^3.35.0",\n    "supports-preserve-symlinks-flag": "^1.0.0",\n    "tailwindcss": "^3.4.17",\n    "terser": "^5.37.0",\n    "thenify": "^3.3.1",\n    "thenify-all": "^1.6.0",\n    "to-regex-range": "^5.0.1",\n    "ts-interface-checker": "^0.1.13",\n    "undici-types": "^6.20.0",\n    "update-browserslist-db": "^1.1.1",\n    "util-deprecate": "^1.0.2",\n    "vue": "^3.5.13",\n    "vue-demi": "^0.14.10",\n    "vue-router": "^4.5.0",\n    "vuex": "^4.1.0",\n    "which": "^2.0.2",\n    "wrap-ansi": "^8.1.0",\n    "wrap-ansi-cjs": "^7.0.0",\n    "yaml": "^2.6.1"\n  },\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "serve": "vite preview"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "@vitejs/plugin-vue": "^5.2.1",\n    "vite": "^6.0.4"\n  }\n}\n",\n  "vue_js_project/postcss.config.js": "# filename: vue_js_project/postcss.config.js\n// filename: vue_js_project/postcss.config.js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n",\n  "vue_js_project/public/index.html": "# filename: vue_js_project/public/index.html\n<!-- filename: vue_js_project/public/index.html -->\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id="app"></div>\n</body>\n</html>\n",\n  "vue_js_project/src/App.vue": "# filename: vue_js_project/src/App.vue\n<!-- filename: vue_js_project/src/App.vue -->\n<template>\n  <div class="bg-white dark:bg-gray-900 min-h-screen text-gray-900 dark:text-white">\n    <Navbar />\n    <router-view />\n  </div>\n</template>\n\n<script setup>\nimport Navbar from './components/Navbar.vue'\n</script>\n\n<style scoped>\n</style>\n",\n  "vue_js_project/src/main.js": "# filename: vue_js_project/src/main.js\n// filename: vue_js_project/src/main.js\nimport { createApp, watch } from 'vue'\nimport App from './App.vue'\nimport './assets/tailwind.css'\nimport router from './router'\nimport store from './store'\nimport axios from './plugins/axios' // Import the Axios plugin\n\nconst app = createApp(App)\napp.use(router)\napp.use(store)\napp.mount('#app')\n\n// Handle dark mode (unchanged)\nwatch(\n  () => store.state.darkMode,\n  (newVal) => {\n    if (newVal) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  },\n  { immediate: true }\n)\n",\n  "vue_js_project/src/router.js": "# filename: vue_js_project/src/router.js\n// filename: vue_js_project/src/router.js\nimport { createRouter, createWebHistory } from 'vue-router'\nimport LoginPage from './pages/LoginPage.vue'\nimport RegisterPage from './pages/RegisterPage.vue'\nimport DashboardTeacher from './pages/DashboardTeacher.vue'\nimport DashboardParent from './pages/DashboardParent.vue'\nimport DashboardAdmin from './pages/DashboardAdmin.vue'\n\nconst routes = [\n  { path: '/', redirect: '/login' },\n  { path: '/login', component: LoginPage },\n  { path: '/register', component: RegisterPage },\n  { path: '/teacher', component: DashboardTeacher },\n  { path: '/parent', component: DashboardParent },\n  { path: '/admin', component: DashboardAdmin }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nexport default router\n",\n  "vue_js_project/src/plugins/axios.js": "# filename: vue_js_project/src/plugins/axios.js\n// filename: vue_js_project/src/plugins/axios.js\nimport axios from 'axios';\n\n// Set your backend API base URL\naxios.defaults.baseURL = 'http://localhost:8000';\n\n// Function to set or remove the Authorization header\nexport function setAuthToken(token) {\n  if (token) {\n    console.log("Setting token in localStorage and Axios headers:", token);\n    localStorage.setItem('accessToken', token);\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    console.log("Removing token from localStorage and Axios headers");\n    localStorage.removeItem('accessToken');\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\n// Initialize the Authorization header if token exists in localStorage\nconst storedToken = localStorage.getItem('accessToken');\nif (storedToken) {\n  console.log("Found token in localStorage, setting Axios Authorization header:", storedToken);\n  axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\n} else {\n  console.log("No token found in localStorage");\n}\n\nexport default axios;\n",\n  "vue_js_project/src/components/Navbar.vue": "# filename: vue_js_project/src/components/Navbar.vue\n<!-- filename: vue_js_project/src/components/Navbar.vue -->\n<template>\n  <nav class="p-4 flex justify-between items-center bg-primary dark:bg-gray-800">\n    <div class="text-white font-bold">Klasstra</div>\n    <div class="flex items-center space-x-4">\n      <ThemeToggle />\n      <button @click="logout" class="bg-white text-black px-3 py-1 rounded">Logout</button>\n    </div>\n  </nav>\n</template>\n\n<script setup>\nimport { useStore } from 'vuex'\nimport ThemeToggle from './ThemeToggle.vue'\nconst store = useStore()\n\nfunction logout() {\n  store.commit('setAuth', {token:null, role:null})\n  location.href = '/login'\n}\n</script>\n",\n  "vue_js_project/src/components/AnnouncementCard.vue": "# filename: vue_js_project/src/components/AnnouncementCard.vue\n<!-- filename: vue_js_project/src/components/AnnouncementCard.vue -->\n<template>\n  <div class="border rounded p-4 shadow mb-4 bg-white dark:bg-gray-800 dark:text-white">\n    <h2 class="font-bold text-lg">{{ title }}</h2>\n    <p class="mt-2">{{ body }}</p>\n    <small class="text-gray-500 dark:text-gray-400">By: {{ createdBy }} • {{ createdAt }}</small>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps } from 'vue'\ndefineProps({\n  title: String,\n  body: String,\n  createdBy: String,\n  createdAt: String\n})\n</script>\n",\n  "vue_js_project/src/components/HelloWorld.vue": "# filename: vue_js_project/src/components/HelloWorld.vue\n<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n    <p>\n      For a guide and recipes on how to configure / customize this project,<br>\n      check out the\n      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.\n    </p>\n    <h3>Installed CLI Plugins</h3>\n    <ul>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>\n    </ul>\n    <h3>Essential Links</h3>\n    <ul>\n      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>\n      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>\n      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>\n      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>\n      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>\n    </ul>\n    <h3>Ecosystem</h3>\n    <ul>\n      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>\n      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>\n      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>\n      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>\n      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n",\n  "vue_js_project/src/components/ThemeToggle.vue": "# filename: vue_js_project/src/components/ThemeToggle.vue\n<!-- ThemeToggle.vue -->\n<template>\n  <button @click="toggle" class="px-3 py-1 bg-secondary text-white rounded">\n    {{ isDark ? 'Light Mode' : 'Dark Mode' }}\n  </button>\n</template>\n\n<script setup>\nimport { computed } from 'vue'; // Import computed\nimport { useStore } from 'vuex';\n\nconst store = useStore();\nconst isDark = computed(() => store.state.darkMode);\n\nfunction toggle() {\n  store.commit('toggleDarkMode');\n}\n</script>\n",\n  "vue_js_project/src/layouts/DefaultLayout.vue": "# filename: vue_js_project/src/layouts/DefaultLayout.vue\n<!-- filename: vue_js_project/src/layouts/DefaultLayout.vue -->\n<template>\n  <div class="container mx-auto p-4">\n    <slot />\n  </div>\n</template>\n\n<script setup>\n</script>\n",\n  "vue_js_project/src/assets/tailwind.css": "# filename: vue_js_project/src/assets/tailwind.css\n/* filename: vue_js_project/src/assets/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Additional custom styles can go here. */\n",\n  "vue_js_project/src/pages/RegisterPage.vue": "# filename: vue_js_project/src/pages/RegisterPage.vue\n<!-- filename: vue_js_project/src/pages/RegisterPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4">Register</h1>\n      <input v-model="username" placeholder="Username" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="firstName" placeholder="First Name" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="lastName" placeholder="Last Name" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="email" placeholder="Email" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="password" type="password" placeholder="Password" class="w-full mb-2 p-2 border rounded"/>\n      <select v-model="role" class="w-full mb-4 p-2 border rounded">\n        <option value="teacher">Teacher</option>\n        <option value="parent">Parent</option>\n      </select>\n      <button @click="register" class="bg-primary text-white w-full p-2 rounded">Register</button>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport axios from 'axios'\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\nconst username = ref('')\nconst firstName = ref('')\nconst lastName = ref('')\nconst email = ref('')\nconst password = ref('')\nconst role = ref('parent')\n\nasync function register(){\n  await axios.post('/users', {\n    username: username.value,\n    first_name: firstName.value,\n    last_name: lastName.value,\n    email: email.value,\n    password: password.value,\n    role: role.value\n  })\n  location.href='/login'\n}\n</script>\n",\n  "vue_js_project/src/pages/LoginPage.vue": "# filename: vue_js_project/src/pages/LoginPage.vue\n<!-- filename: vue_js_project/src/pages/LoginPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4">Login</h1>\n      <form @submit.prevent="login">\n        <input\n          v-model="username"\n          placeholder="Username or Email"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="username"\n        />\n        <input\n          v-model="password"\n          type="password"\n          placeholder="Password"\n          class="w-full mb-4 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="current-password"\n        />\n        <button type="submit" class="bg-primary text-white w-full p-2 rounded">\n          Login\n        </button>\n      </form>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport axios, { setAuthToken } from '../plugins/axios.js'; // Import setAuthToken\nimport DefaultLayout from '../layouts/DefaultLayout.vue';\n\nconst store = useStore();\nconst username = ref('');\nconst password = ref('');\n\nasync function login() {\n  try {\n    const res = await axios.post('/auth/login', { username: username.value, password: password.value });\n    const token = res.data.access_token;\n\n    // Use setAuthToken to store the token and set Axios header\n    setAuthToken(token);\n\n    const tokenData = parseJwt(token);\n    store.commit('setAuth', { token, role: tokenData.role });\n\n    redirectByRole();\n  } catch (err) {\n    console.error('Login failed:', err);\n  }\n}\n\nfunction parseJwt(token) {\n  const base64Url = token.split('.')[1];\n  return JSON.parse(decodeURIComponent(atob(base64Url).split('').map(c => {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join('')));\n}\n\nfunction redirectByRole() {\n  if (store.state.role === 'teacher') location.href = '/teacher';\n  else if (store.state.role === 'parent' || store.state.role === 'class_rep') location.href = '/parent';\n  else if (store.state.role === 'admin') location.href = '/admin';\n}\n</script>\n",\n  "vue_js_project/src/pages/DashboardTeacher.vue": "# filename: vue_js_project/src/pages/DashboardTeacher.vue\n<!-- filename: vue_js_project/src/pages/DashboardTeacher.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Teacher Dashboard</h1>\n    <p>Welcome, Teacher. Create and manage announcements for your classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n",\n  "vue_js_project/src/pages/DashboardAdmin.vue": "# filename: vue_js_project/src/pages/DashboardAdmin.vue\n<!-- filename: vue_js_project/src/pages/DashboardAdmin.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Admin Dashboard</h1>\n    <p>Manage users, roles, and classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n",\n  "vue_js_project/src/pages/DashboardParent.vue": "# filename: vue_js_project/src/pages/DashboardParent.vue\n<!-- filename: vue_js_project/src/pages/DashboardParent.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Parent Dashboard</h1>\n    <p>View announcements for your children’s classes.</p>\n\n    <!-- Add Child Form -->\n    <div class="mt-8 p-4 border rounded bg-white dark:bg-gray-800">\n      <h2 class="text-xl font-bold mb-4">Add a Child</h2>\n      <div class="mb-2">\n        <input v-model="firstName" placeholder="Child's First Name" class="w-full p-2 border rounded mb-2" />\n        <input v-model="lastName" placeholder="Child's Last Name" class="w-full p-2 border rounded mb-2" />\n        \n        <select v-model="selectedClassId" class="w-full p-2 border rounded mb-4">\n          <option disabled value="">Select a class</option>\n          <option v-for="cls in classes" :key="cls.id" :value="cls.id">\n            {{ cls.name }}\n          </option>\n        </select>\n        \n        <button @click="addChild" class="bg-primary text-white px-4 py-2 rounded">\n          Add Child\n        </button>\n      </div>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport DefaultLayout from '../layouts/DefaultLayout.vue';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\nconst firstName = ref('');\nconst lastName = ref('');\nconst selectedClassId = ref('');\nconst classes = ref([]);\n\nonMounted(async () => {\n  try {\n    console.log("Fetching classes...");\n    const res = await axios.get('/classes');\n    console.log("Classes fetched:", res.data);\n    classes.value = res.data;\n  } catch (err) {\n    console.error("Error fetching classes:", err);\n  }\n});\n\nasync function addChild() {\n  try {\n    console.log("Attempting to fetch current user...");\n    console.log("Authorization token:", store.state.token);\n\n    const me = await axios.get('/users/me', {\n      headers: { Authorization: `Bearer ${store.state.token}` }\n    });\n\n    console.log("Current user data:", me.data);\n\n    console.log("Adding child with details:", {\n      parent_id: me.data.id,\n      first_name: firstName.value,\n      last_name: lastName.value,\n      class_id: selectedClassId.value\n    });\n\n    const res = await axios.post(\n      '/children',\n      {\n        parent_id: me.data.id,\n        first_name: firstName.value,\n        last_name: lastName.value,\n        class_id: selectedClassId.value\n      },\n      {\n        headers: { Authorization: `Bearer ${store.state.token}` }\n      }\n    );\n\n    console.log("Child added successfully:", res.data);\n\n    // Clear form\n    firstName.value = '';\n    lastName.value = '';\n    selectedClassId.value = '';\n  } catch (err) {\n    console.error("Error adding child:", err);\n  }\n}\n</script>\n",\n  "vue_js_project/src/store/index.js": "# filename: vue_js_project/src/store/index.js\n// filename: vue_js_project/src/store/index.js\nimport { createStore } from 'vuex'\n\nconst store = createStore({\n  state: {\n    token: localStorage.getItem('accessToken') || null, // Rehydrate token from localStorage\n    role: null,\n    darkMode: false,\n  },\n  mutations: {\n    setAuth(state, { token, role }) {\n      state.token = token\n      state.role = role\n      // Save token to localStorage for persistence\n      localStorage.setItem('accessToken', token)\n    },\n    clearAuth(state) {\n      state.token = null\n      state.role = null\n      // Remove token from localStorage\n      localStorage.removeItem('accessToken')\n    },\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode\n    }\n  },\n  actions: {\n    login({ commit }, payload) {\n      commit('setAuth', payload)\n    },\n    logout({ commit }) {\n      commit('clearAuth')\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.token,\n    getUserRole: state => state.role,\n  }\n})\n\nexport default store\n",\n}\n",
  "python_project/app/seed.py": "# filename: python_project/app/seed.py\n# filename: app/seed.py\nimport sys\nimport os\n\n# Add the project root to sys.path to allow imports from 'app'\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nproject_root = os.path.abspath(os.path.join(current_dir, '..'))\nsys.path.insert(0, project_root)\n\nfrom app.core.database import SessionLocal\nfrom app.models.user import User\nfrom app.models.class_ import Class\nfrom app.models.child import Child\nfrom app.models.announcement import Announcement\nfrom app.core.security import hash_password\n\ndef seed():\n    db = SessionLocal()\n    try:\n        # Create an admin user if not exists\n        if not db.query(User).filter(User.username == "admin").first():\n            admin = User(\n                username="admin",\n                first_name="Admin",\n                last_name="User",\n                email="admin@example.com",\n                password_hash=hash_password("AdminSecurePass123!"),\n                role="admin",\n            )\n            db.add(admin)\n            db.commit()\n            print("Admin user created: admin / AdminSecurePass123!")\n        else:\n            print("Admin user already exists.")\n\n        # Create a teacher user if not exists\n        if not db.query(User).filter(User.username == "teacher1").first():\n            teacher = User(\n                username="teacher1",\n                first_name="John",\n                last_name="Doe",\n                email="john.doe@example.com",\n                password_hash=hash_password("TeacherPass123!"),\n                role="teacher",\n            )\n            db.add(teacher)\n            db.commit()\n            print("Teacher user created: teacher1 / TeacherPass123!")\n        else:\n            print("Teacher user already exists.")\n\n        # Create a parent user if not exists\n        if not db.query(User).filter(User.username == "parent1").first():\n            parent = User(\n                username="parent1",\n                first_name="Jane",\n                last_name="Smith",\n                email="jane.smith@example.com",\n                password_hash=hash_password("ParentPass123!"),\n                role="parent",\n            )\n            db.add(parent)\n            db.commit()\n            print("Parent user created: parent1 / ParentPass123!")\n        else:\n            print("Parent user already exists.")\n\n        # Create sample classes if not exists\n        sample_classes = ["Mathematics", "Science", "History", "Art", "Physical Education"]\n        class_objects = []\n        for class_name in sample_classes:\n            existing_class = db.query(Class).filter(Class.name == class_name).first()\n            if not existing_class:\n                cls = Class(name=class_name)\n                db.add(cls)\n                db.commit()\n                db.refresh(cls)\n                class_objects.append(cls)\n                print(f"Class '{class_name}' created.")\n            else:\n                class_objects.append(existing_class)\n                print(f"Class '{class_name}' already exists.")\n\n        # Retrieve parent and teacher users\n        parent_user = db.query(User).filter(User.username == "parent1").first()\n        teacher_user = db.query(User).filter(User.username == "teacher1").first()\n\n        # Create children for the parent\n        existing_children = db.query(Child).filter(Child.parent_id == parent_user.id).all()\n        if not existing_children:\n            child1 = Child(\n                parent_id=parent_user.id,\n                first_name="Alice",\n                last_name="Smith",\n                class_id=class_objects[0].id,  # Mathematics\n            )\n            child2 = Child(\n                parent_id=parent_user.id,\n                first_name="Bob",\n                last_name="Smith",\n                class_id=class_objects[1].id,  # Science\n            )\n            db.add_all([child1, child2])\n            db.commit()\n            print("Children Alice and Bob added for parent1.")\n        else:\n            print("Children already exist for parent1.")\n\n        # Create announcements from the teacher\n        existing_announcements = db.query(Announcement).filter(Announcement.created_by == teacher_user.id).all()\n        if not existing_announcements:\n            announcement1 = Announcement(\n                title="Welcome to Mathematics!",\n                body="We will start with algebra basics next week.",\n                created_by=teacher_user.id,\n                recipient_type="class",\n                recipient_id=class_objects[0].id,  # Mathematics\n            )\n            announcement2 = Announcement(\n                title="Science Fair Reminder",\n                body="Don't forget to register for the upcoming science fair.",\n                created_by=teacher_user.id,\n                recipient_type="class",\n                recipient_id=class_objects[1].id,  # Science\n            )\n            db.add_all([announcement1, announcement2])\n            db.commit()\n            print("Announcements created by teacher1.")\n        else:\n            print("Announcements already exist for teacher1.")\n\n    finally:\n        db.close()\n\nif __name__ == "__main__":\n    seed()\n",
  "python_project/app/main.py": "# filename: python_project/app/main.py\n# filename: app/main.py\nfrom fastapi import FastAPI\nfrom app.routers import auth, users, classes, announcements, children, admin\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.core.database import Base, engine\nfrom sqlalchemy import text, inspect\nfrom app.seed import seed  # Import the seed function\n\napp = FastAPI(title="Klasstra")\n\n\n# Reset the database schema on startup\nwith engine.connect() as connection:\n    connection = connection.execution_options(isolation_level="AUTOCOMMIT")  # Enable autocommit mode\n\n    inspector = inspect(engine)\n    tables = inspector.get_table_names()\n\n    if tables:\n        print("Dropping all tables except 'alembic_version'...")\n        for table in tables:\n            if table != "alembic_version":\n                connection.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))\n                print(f"Dropped table: {table}")\n        print("All applicable tables dropped.")\n    else:\n        print("No tables found. Skipping drop.")\n\n    print("Recreating tables...")\n    Base.metadata.create_all(engine)\n    print("Database tables created.")\n\n# Seed the database with sample data\nprint("Seeding the database with sample data...")\nseed()\nprint("Database seeding complete.")\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],  # Adjust this in production for security\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# Include API routers\napp.include_router(auth.router)\napp.include_router(users.router)\napp.include_router(classes.router)\napp.include_router(announcements.router)\napp.include_router(children.router)\napp.include_router(admin.router)\n",
  "python_project/app/routers/auth.py": "# filename: python_project/app/routers/auth.py\n# filename: app/routers/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.schemas.auth import LoginData, Token\nfrom app.core.database import get_db\nfrom app.core.security import verify_password\nfrom app.core.auth import create_access_token\nfrom app.models.user import User\n\nrouter = APIRouter(prefix="/auth", tags=["auth"])\n\n@router.post("/login", response_model=Token)\ndef login(data: LoginData, db: Session = Depends(get_db)):\n    user = db.query(User).filter((User.username==data.username)|(User.email==data.username)).first()\n    if not user or not verify_password(data.password, user.password_hash):\n        raise HTTPException(status_code=401, detail="Invalid credentials")\n    token = create_access_token({"sub": user.username, "role": user.role, "user_id": user.id})\n    return {"access_token": token}\n",
  "python_project/app/routers/children.py": "# filename: python_project/app/routers/children.py\n# filename: app/routers/children.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.child import ChildBase, ChildOut\nfrom app.models.child import Child\nfrom app.models.class_ import Class\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import is_parent\n\nrouter = APIRouter(prefix="/children", tags=["children"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ChildOut)\ndef add_child(c: ChildBase, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not is_parent(payload.get("role")) or payload.get("user_id") != c.parent_id:\n        raise HTTPException(status_code=403, detail="Not allowed")\n\n    # Check if the class exists\n    cls = db.query(Class).filter(Class.id == c.class_id).first()\n    if not cls:\n        raise HTTPException(status_code=400, detail="Invalid class_id. Class does not exist.")\n\n    ch = Child(**c.dict())\n    db.add(ch)\n    db.commit()\n    db.refresh(ch)\n    return ch\n",
  "python_project/app/routers/users.py": "# filename: python_project/app/routers/users.py\n# filename: app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.core.security import hash_password\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\n\nrouter = APIRouter(prefix="/users", tags=["users"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=UserOut)\ndef create_user(user_in: UserCreate, db: Session = Depends(get_db)):\n    if db.query(User).filter((User.username==user_in.username)|(User.email==user_in.email)).first():\n        raise HTTPException(status_code=400, detail="User exists")\n    user = User(\n        username=user_in.username,\n        first_name=user_in.first_name,\n        last_name=user_in.last_name,\n        email=user_in.email,\n        password_hash=hash_password(user_in.password),\n        role=user_in.role\n    )\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n\n@router.get("/me", response_model=UserOut)\ndef get_me(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    username = payload.get("sub")\n    user = db.query(User).filter(User.username==username).first()\n    if not user:\n        raise HTTPException(status_code=401, detail="Invalid token")\n    return user\n",
  "python_project/app/routers/admin.py": "# filename: python_project/app/routers/admin.py\n# filename: app/routers/admin.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.models.user import User\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/admin", tags=["admin"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.put("/user/{user_id}/class_rep")\ndef make_class_rep(user_id: int, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    user = db.query(User).filter(User.id==user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    user.role = "class_rep"\n    db.commit()\n    return {"detail": "User promoted to class_rep"}\n",
  "python_project/app/routers/classes.py": "# filename: python_project/app/routers/classes.py\n# filename: app/routers/classes.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.models.class_ import Class\nfrom app.schemas.class_ import ClassBase, ClassOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix="/classes", tags=["classes"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=ClassOut)\ndef create_class(c: ClassBase, token: str=Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get("role")):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    cls = Class(name=c.name)\n    db.add(cls)\n    db.commit()\n    db.refresh(cls)\n    return cls\n\n@router.get("/", response_model=list[ClassOut])\ndef list_classes(db: Session = Depends(get_db)):\n    # No auth needed, or optionally add auth if required.\n    return db.query(Class).all()\n",
  "python_project/app/routers/announcements.py": "# filename: python_project/app/routers/announcements.py\n# filename: app/routers/announcements.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.announcement import AnnouncementCreate, AnnouncementOut\nfrom app.models.announcement import Announcement\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_create_announcements\nfrom app.utils.rate_limit import check_rate_limit\n\nrouter = APIRouter(prefix="/announcements", tags=["announcements"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")\n\n@router.post("/", response_model=AnnouncementOut)\ndef create_announcement(a: AnnouncementCreate, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    user_id = payload.get("user_id")\n    role = payload.get("role")\n    if not can_create_announcements(role):\n        raise HTTPException(status_code=403, detail="Not allowed")\n    if not check_rate_limit(user_id):\n        raise HTTPException(status_code=429, detail="Rate limit exceeded")\n    ann = Announcement(\n        title=a.title, body=a.body, created_by=user_id, last_updated_by=user_id,\n        recipient_type=a.recipient_type, recipient_id=a.recipient_id)\n    db.add(ann)\n    db.commit()\n    db.refresh(ann)\n    return ann\n",
  "python_project/app/core/auth.py": "# filename: python_project/app/core/auth.py\n# filename: app/core/auth.py\nfrom datetime import datetime, timedelta\nfrom jose import jwt\nfrom app.core.config import settings\n\ndef create_access_token(data: dict, expires_delta: int = 3600):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(seconds=expires_delta)\n    to_encode.update({"exp": expire})\n    return jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)\n",
  "python_project/app/core/config.py": "# filename: python_project/app/core/config.py\n# filename: app/core/config.py\nimport os\nimport secrets\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Settings:\n    PROJECT_NAME: str = "Klasstra"\n    SQLALCHEMY_DATABASE_URI: str = os.getenv("DATABASE_URL", "postgresql+psycopg2://YOUR_DB_CONNECTION_STRING")\n    \n    # If JWT_SECRET is not provided, generate one securely.\n    jwt_secret_env = os.getenv("JWT_SECRET")\n    if not jwt_secret_env or jwt_secret_env.strip() == "":\n        # Generate a 43-character URL-safe secret (≈256 bits)\n        jwt_secret_env = secrets.token_urlsafe(32)\n        \n    JWT_SECRET: str = jwt_secret_env\n    JWT_ALGORITHM: str = os.getenv("JWT_ALGORITHM", "HS256")\n    RATE_LIMIT: int = 5 # announcements per minute per user\n\nsettings = Settings()\n",
  "python_project/app/core/database.py": "# filename: python_project/app/core/database.py\n# filename: app/core/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\n\nengine = create_engine(settings.SQLALCHEMY_DATABASE_URI, pool_pre_ping=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n",
  "python_project/app/core/security.py": "# filename: python_project/app/core/security.py\n# filename: app/core/security.py\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain: str, hashed: str) -> bool:\n    return pwd_context.verify(plain, hashed)\n",
  "python_project/app/utils/roles.py": "# filename: python_project/app/utils/roles.py\n# filename: app/utils/roles.py\ndef can_create_announcements(role: str) -> bool:\n    return role in ["teacher", "class_rep", "admin"]\n\ndef can_manage_users(role: str) -> bool:\n    return role == "admin"\n\ndef is_parent(role: str) -> bool:\n    return role in ["parent", "class_rep"]\n",
  "python_project/app/utils/rate_limit.py": "# filename: python_project/app/utils/rate_limit.py\n# filename: app/utils/rate_limit.py\nfrom collections import defaultdict\nfrom time import time\nfrom app.core.config import settings\n\nrates = defaultdict(list)\n\ndef check_rate_limit(user_id: int) -> bool:\n    now = time()\n    rates[user_id] = [t for t in rates[user_id] if t > now - 60]\n    if len(rates[user_id]) >= settings.RATE_LIMIT:\n        return False\n    rates[user_id].append(now)\n    return True\n",
  "python_project/app/models/user.py": "# filename: python_project/app/models/user.py\n# filename: app/models/user.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\n# Roles: "teacher", "parent", "admin", "class_rep"\nclass User(Base):\n    __tablename__ = "users"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True, nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)\n    password_hash = Column(String, nullable=False)\n    role = Column(String, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/models/child.py": "# filename: python_project/app/models/child.py\n# filename: app/models/child.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Child(Base):\n    __tablename__ = "children"\n    id = Column(Integer, primary_key=True, index=True)\n    parent_id = Column(Integer, ForeignKey("users.id"), nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    class_id = Column(Integer, ForeignKey("classes.id"), nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/models/announcement.py": "# filename: python_project/app/models/announcement.py\n# filename: app/models/announcement.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Announcement(Base):\n    __tablename__ = "announcements"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n    created_by = Column(Integer, ForeignKey("users.id"), nullable=False)\n    last_updated_by = Column(Integer, ForeignKey("users.id"), nullable=True)\n    recipient_type = Column(String, nullable=False) # "class" or "parent"\n    recipient_id = Column(Integer, nullable=False)   # class_id or user_id\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/models/audit_log.py": "# filename: python_project/app/models/audit_log.py\n# filename: app/models/audit_log.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass AuditLog(Base):\n    __tablename__ = "audit_logs"\n    id = Column(Integer, primary_key=True, index=True)\n    entity_type = Column(String, nullable=False)\n    entity_id = Column(Integer, nullable=False)\n    action = Column(String, nullable=False)\n    performed_by = Column(Integer, ForeignKey("users.id"))\n    timestamp = Column(DateTime(timezone=True), server_default=func.now())\n",
  "python_project/app/models/class_.py": "# filename: python_project/app/models/class_.py\n# filename: app/models/class_.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Class(Base):\n    __tablename__ = "classes"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/schemas/auth.py": "# filename: python_project/app/schemas/auth.py\n# filename: app/schemas/auth.py\nfrom pydantic import BaseModel\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = "bearer"\n\nclass LoginData(BaseModel):\n    username: str\n    password: str\n",
  "python_project/app/schemas/user.py": "# filename: python_project/app/schemas/user.py\n# filename: app/schemas/user.py\nfrom pydantic import BaseModel, EmailStr, constr, Field\nfrom app.schemas.common import Timestamped\n\nclass UserBase(BaseModel):\n    username: str = Field(..., min_length=3, max_length=20, pattern=r"^[a-zA-Z0-9_]+$",\n                          description="Username must be 3-20 characters long and contain only alphanumeric characters or underscores.")\n    first_name: str = Field(..., min_length=1, description="First name is required and must have at least 1 character.")\n    last_name: str = Field(..., min_length=1, description="Last name is required and must have at least 1 character.")\n    email: EmailStr = Field(..., description="A valid email address.")\n    role: str = Field(..., pattern=r"^(teacher|parent|admin|class_rep)$", \n                      description="Role must be one of: teacher, parent, admin, class_rep.")\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8, max_length=50, \n                          description="Password must be between 8 and 50 characters.")\n\nclass UserOut(UserBase, Timestamped):\n    id: int\n",
  "python_project/app/schemas/common.py": "# filename: python_project/app/schemas/common.py\n# filename: app/schemas/common.py\nfrom pydantic import BaseModel\nfrom datetime import datetime\n\nclass Timestamped(BaseModel):\n    created_at: datetime\n    updated_at: datetime | None\n    class Config:\n        from_attributes = True\n",
  "python_project/app/schemas/child.py": "# filename: python_project/app/schemas/child.py\n# filename: app/schemas/child.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ChildBase(BaseModel):\n    parent_id: int\n    first_name: str\n    last_name: str\n    class_id: int\n\nclass ChildOut(ChildBase, Timestamped):\n    id: int\n\n    class Config:\n        from_attributes = True\n",
  "python_project/app/schemas/announcement.py": "# filename: python_project/app/schemas/announcement.py\n# filename: app/schemas/announcement.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass AnnouncementBase(BaseModel):\n    title: str\n    body: str\n    recipient_type: str\n    recipient_id: int\n\nclass AnnouncementCreate(AnnouncementBase):\n    pass\n\nclass AnnouncementOut(AnnouncementBase, Timestamped):\n    id: int\n    created_by: int\n    last_updated_by: int | None\n",
  "python_project/app/schemas/class_.py": "# filename: python_project/app/schemas/class_.py\n# filename: app/schemas/class_.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ClassBase(BaseModel):\n    name: str\n\nclass ClassOut(ClassBase, Timestamped):\n    id: int\n",
  "vue_js_project/jsconfig.json": "# filename: vue_js_project/jsconfig.json\n{\n    "compilerOptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "moduleResolution": "node",\n      "baseUrl": ".",\n      "paths": {\n        "@/*": ["src/*"]\n      }\n    },\n    "include": ["src/**/*", "index.html"],\n    "exclude": ["node_modules", "dist"]\n  }",
  "vue_js_project/index.html": "# filename: vue_js_project/index.html\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id="app"></div>\n  <script type="module" src="/src/main.js"></script>\n</body>\n</html>\n",
  "vue_js_project/tailwind.config.js": "# filename: vue_js_project/tailwind.config.js\n// filename: vue_js_project/tailwind.config.js\nmodule.exports = {\n  content: ["./index.html","./src/**/*.{vue,js,ts,jsx,tsx}"],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: '#2563eb',\n        secondary: '#9333ea'\n      }\n    },\n  },\n  plugins: [],\n}\n",
  "vue_js_project/vite.config.js": "# filename: vue_js_project/vite.config.js\n// vite.config.js\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n  plugins: [vue()],\n});\n",
  "vue_js_project/README.md": "# filename: vue_js_project/README.md\n# vue_js_project\n\n## Project setup\n```\nnpm install\n```\n\n### Compiles and hot-reloads for development\n```\nnpm run serve\n```\n\n### Compiles and minifies for production\n```\nnpm run build\n```\n\n### Lints and fixes files\n```\nnpm run lint\n```\n\n### Customize configuration\nSee [Configuration Reference](https://cli.vuejs.org/config/).\n",
  "vue_js_project/package.json": "# filename: vue_js_project/package.json\n{\n  "name": "vue_js_project",\n  "version": "1.0.0",\n  "description": "## Project setup ``` npm install ```",\n  "main": "postcss.config.js",\n  "dependencies": {\n    "acorn": "^8.14.0",\n    "ansi-regex": "^6.1.0",\n    "ansi-styles": "^6.2.1",\n    "any-promise": "^1.3.0",\n    "anymatch": "^3.1.3",\n    "arg": "^5.0.2",\n    "asynckit": "^0.4.0",\n    "autoprefixer": "^10.4.20",\n    "axios": "^1.7.9",\n    "balanced-match": "^1.0.2",\n    "binary-extensions": "^2.3.0",\n    "brace-expansion": "^2.0.1",\n    "braces": "^3.0.3",\n    "browserslist": "^4.24.3",\n    "buffer-from": "^1.1.2",\n    "camelcase-css": "^2.0.1",\n    "caniuse-lite": "^1.0.30001689",\n    "chokidar": "^3.6.0",\n    "color-convert": "^2.0.1",\n    "color-name": "^1.1.4",\n    "combined-stream": "^1.0.8",\n    "commander": "^4.1.1",\n    "cross-spawn": "^7.0.6",\n    "cssesc": "^3.0.0",\n    "csstype": "^3.1.3",\n    "delayed-stream": "^1.0.0",\n    "didyoumean": "^1.2.2",\n    "dlv": "^1.1.3",\n    "eastasianwidth": "^0.2.0",\n    "electron-to-chromium": "^1.5.74",\n    "emoji-regex": "^9.2.2",\n    "entities": "^4.5.0",\n    "esbuild": "^0.18.20",\n    "escalade": "^3.2.0",\n    "estree-walker": "^2.0.2",\n    "fast-glob": "^3.3.2",\n    "fastq": "^1.17.1",\n    "fill-range": "^7.1.1",\n    "follow-redirects": "^1.15.9",\n    "foreground-child": "^3.3.0",\n    "form-data": "^4.0.1",\n    "fraction.js": "^4.3.7",\n    "fsevents": "^2.3.3",\n    "function-bind": "^1.1.2",\n    "glob": "^10.4.5",\n    "glob-parent": "^6.0.2",\n    "hasown": "^2.0.2",\n    "is-binary-path": "^2.1.0",\n    "is-core-module": "^2.16.0",\n    "is-extglob": "^2.1.1",\n    "is-fullwidth-code-point": "^3.0.0",\n    "is-glob": "^4.0.3",\n    "is-number": "^7.0.0",\n    "isexe": "^2.0.0",\n    "jackspeak": "^3.4.3",\n    "jiti": "^1.21.7",\n    "jwt-decode": "^3.1.2",\n    "lilconfig": "^3.1.3",\n    "lines-and-columns": "^1.2.4",\n    "lru-cache": "^10.4.3",\n    "magic-string": "^0.30.17",\n    "merge2": "^1.4.1",\n    "micromatch": "^4.0.8",\n    "mime-db": "^1.52.0",\n    "mime-types": "^2.1.35",\n    "minimatch": "^9.0.5",\n    "minipass": "^7.1.2",\n    "mz": "^2.7.0",\n    "nanoid": "^3.3.8",\n    "node-releases": "^2.0.19",\n    "normalize-path": "^3.0.0",\n    "normalize-range": "^0.1.2",\n    "object-assign": "^4.1.1",\n    "object-hash": "^3.0.0",\n    "package-json-from-dist": "^1.0.1",\n    "path-key": "^3.1.1",\n    "path-parse": "^1.0.7",\n    "path-scurry": "^1.11.1",\n    "picocolors": "^1.1.1",\n    "picomatch": "^2.3.1",\n    "pify": "^2.3.0",\n    "pinia": "^2.3.0",\n    "pirates": "^4.0.6",\n    "postcss": "^8.4.49",\n    "postcss-import": "^15.1.0",\n    "postcss-js": "^4.0.1",\n    "postcss-load-config": "^4.0.2",\n    "postcss-nested": "^6.2.0",\n    "postcss-selector-parser": "^6.1.2",\n    "postcss-value-parser": "^4.2.0",\n    "proxy-from-env": "^1.1.0",\n    "queue-microtask": "^1.2.3",\n    "read-cache": "^1.0.0",\n    "readdirp": "^3.6.0",\n    "resolve": "^1.22.9",\n    "reusify": "^1.0.4",\n    "rollup": "^3.29.5",\n    "run-parallel": "^1.2.0",\n    "shebang-command": "^2.0.0",\n    "shebang-regex": "^3.0.0",\n    "signal-exit": "^4.1.0",\n    "source-map": "^0.6.1",\n    "source-map-js": "^1.2.1",\n    "source-map-support": "^0.5.21",\n    "string-width": "^5.1.2",\n    "string-width-cjs": "^4.2.3",\n    "strip-ansi": "^7.1.0",\n    "strip-ansi-cjs": "^6.0.1",\n    "sucrase": "^3.35.0",\n    "supports-preserve-symlinks-flag": "^1.0.0",\n    "tailwindcss": "^3.4.17",\n    "terser": "^5.37.0",\n    "thenify": "^3.3.1",\n    "thenify-all": "^1.6.0",\n    "to-regex-range": "^5.0.1",\n    "ts-interface-checker": "^0.1.13",\n    "undici-types": "^6.20.0",\n    "update-browserslist-db": "^1.1.1",\n    "util-deprecate": "^1.0.2",\n    "vue": "^3.5.13",\n    "vue-demi": "^0.14.10",\n    "vue-router": "^4.5.0",\n    "vuex": "^4.1.0",\n    "which": "^2.0.2",\n    "wrap-ansi": "^8.1.0",\n    "wrap-ansi-cjs": "^7.0.0",\n    "yaml": "^2.6.1"\n  },\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "serve": "vite preview"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "@vitejs/plugin-vue": "^5.2.1",\n    "vite": "^6.0.4"\n  }\n}\n",
  "vue_js_project/postcss.config.js": "# filename: vue_js_project/postcss.config.js\n// filename: vue_js_project/postcss.config.js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n",
  "vue_js_project/public/index.html": "# filename: vue_js_project/public/index.html\n<!-- filename: vue_js_project/public/index.html -->\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id="app"></div>\n</body>\n</html>\n",
  "vue_js_project/src/App.vue": "# filename: vue_js_project/src/App.vue\n<!-- filename: vue_js_project/src/App.vue -->\n<template>\n  <div class="bg-white dark:bg-gray-900 min-h-screen text-gray-900 dark:text-white">\n    <Navbar />\n    <router-view />\n  </div>\n</template>\n\n<script setup>\nimport Navbar from './components/Navbar.vue'\n</script>\n\n<style scoped>\n</style>\n",
  "vue_js_project/src/main.js": "# filename: vue_js_project/src/main.js\n// filename: vue_js_project/src/main.js\nimport { createApp, watch } from 'vue'\nimport App from './App.vue'\nimport './assets/tailwind.css'\nimport router from './router'\nimport store from './store'\nimport axios from './plugins/axios' // Import the Axios plugin\n\nconst app = createApp(App)\napp.use(router)\napp.use(store)\napp.mount('#app')\n\n// Handle dark mode (unchanged)\nwatch(\n  () => store.state.darkMode,\n  (newVal) => {\n    if (newVal) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  },\n  { immediate: true }\n)\n",
  "vue_js_project/src/router.js": "# filename: vue_js_project/src/router.js\n// filename: vue_js_project/src/router.js\nimport { createRouter, createWebHistory } from 'vue-router'\nimport LoginPage from './pages/LoginPage.vue'\nimport RegisterPage from './pages/RegisterPage.vue'\nimport DashboardTeacher from './pages/DashboardTeacher.vue'\nimport DashboardParent from './pages/DashboardParent.vue'\nimport DashboardAdmin from './pages/DashboardAdmin.vue'\n\nconst routes = [\n  { path: '/', redirect: '/login' },\n  { path: '/login', component: LoginPage },\n  { path: '/register', component: RegisterPage },\n  { path: '/teacher', component: DashboardTeacher },\n  { path: '/parent', component: DashboardParent },\n  { path: '/admin', component: DashboardAdmin }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nexport default router\n",
  "vue_js_project/src/plugins/axios.js": "# filename: vue_js_project/src/plugins/axios.js\n// filename: vue_js_project/src/plugins/axios.js\nimport axios from 'axios';\n\n// Set your backend API base URL\naxios.defaults.baseURL = 'http://localhost:8000';\n\n// Function to set or remove the Authorization header\nexport function setAuthToken(token) {\n  if (token) {\n    console.log("Setting token in localStorage and Axios headers:", token);\n    localStorage.setItem('accessToken', token);\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    console.log("Removing token from localStorage and Axios headers");\n    localStorage.removeItem('accessToken');\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\n// Initialize the Authorization header if token exists in localStorage\nconst storedToken = localStorage.getItem('accessToken');\nif (storedToken) {\n  console.log("Found token in localStorage, setting Axios Authorization header:", storedToken);\n  axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\n} else {\n  console.log("No token found in localStorage");\n}\n\nexport default axios;\n",
  "vue_js_project/src/components/Navbar.vue": "# filename: vue_js_project/src/components/Navbar.vue\n<!-- filename: vue_js_project/src/components/Navbar.vue -->\n<template>\n  <nav class="p-4 flex justify-between items-center bg-primary dark:bg-gray-800">\n    <div class="text-white font-bold">Klasstra</div>\n    <div class="flex items-center space-x-4">\n      <ThemeToggle />\n      <button @click="logout" class="bg-white text-black px-3 py-1 rounded">Logout</button>\n    </div>\n  </nav>\n</template>\n\n<script setup>\nimport { useStore } from 'vuex'\nimport ThemeToggle from './ThemeToggle.vue'\nconst store = useStore()\n\nfunction logout() {\n  store.commit('setAuth', {token:null, role:null})\n  location.href = '/login'\n}\n</script>\n",
  "vue_js_project/src/components/AnnouncementCard.vue": "# filename: vue_js_project/src/components/AnnouncementCard.vue\n<!-- filename: vue_js_project/src/components/AnnouncementCard.vue -->\n<template>\n  <div class="border rounded p-4 shadow mb-4 bg-white dark:bg-gray-800 dark:text-white">\n    <h2 class="font-bold text-lg">{{ title }}</h2>\n    <p class="mt-2">{{ body }}</p>\n    <small class="text-gray-500 dark:text-gray-400">By: {{ createdBy }} • {{ createdAt }}</small>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps } from 'vue'\ndefineProps({\n  title: String,\n  body: String,\n  createdBy: String,\n  createdAt: String\n})\n</script>\n",
  "vue_js_project/src/components/HelloWorld.vue": "# filename: vue_js_project/src/components/HelloWorld.vue\n<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n    <p>\n      For a guide and recipes on how to configure / customize this project,<br>\n      check out the\n      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.\n    </p>\n    <h3>Installed CLI Plugins</h3>\n    <ul>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>\n      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>\n    </ul>\n    <h3>Essential Links</h3>\n    <ul>\n      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>\n      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>\n      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>\n      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>\n      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>\n    </ul>\n    <h3>Ecosystem</h3>\n    <ul>\n      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>\n      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>\n      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>\n      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>\n      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>\n\n<!-- Add "scoped" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n",
  "vue_js_project/src/components/ThemeToggle.vue": "# filename: vue_js_project/src/components/ThemeToggle.vue\n<!-- ThemeToggle.vue -->\n<template>\n  <button @click="toggle" class="px-3 py-1 bg-secondary text-white rounded">\n    {{ isDark ? 'Light Mode' : 'Dark Mode' }}\n  </button>\n</template>\n\n<script setup>\nimport { computed } from 'vue'; // Import computed\nimport { useStore } from 'vuex';\n\nconst store = useStore();\nconst isDark = computed(() => store.state.darkMode);\n\nfunction toggle() {\n  store.commit('toggleDarkMode');\n}\n</script>\n",
  "vue_js_project/src/layouts/DefaultLayout.vue": "# filename: vue_js_project/src/layouts/DefaultLayout.vue\n<!-- filename: vue_js_project/src/layouts/DefaultLayout.vue -->\n<template>\n  <div class="container mx-auto p-4">\n    <slot />\n  </div>\n</template>\n\n<script setup>\n</script>\n",
  "vue_js_project/src/assets/tailwind.css": "# filename: vue_js_project/src/assets/tailwind.css\n/* filename: vue_js_project/src/assets/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Additional custom styles can go here. */\n",
  "vue_js_project/src/pages/RegisterPage.vue": "# filename: vue_js_project/src/pages/RegisterPage.vue\n<!-- filename: vue_js_project/src/pages/RegisterPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4">Register</h1>\n      <input v-model="username" placeholder="Username" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="firstName" placeholder="First Name" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="lastName" placeholder="Last Name" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="email" placeholder="Email" class="w-full mb-2 p-2 border rounded"/>\n      <input v-model="password" type="password" placeholder="Password" class="w-full mb-2 p-2 border rounded"/>\n      <select v-model="role" class="w-full mb-4 p-2 border rounded">\n        <option value="teacher">Teacher</option>\n        <option value="parent">Parent</option>\n      </select>\n      <button @click="register" class="bg-primary text-white w-full p-2 rounded">Register</button>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport axios from 'axios'\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\nconst username = ref('')\nconst firstName = ref('')\nconst lastName = ref('')\nconst email = ref('')\nconst password = ref('')\nconst role = ref('parent')\n\nasync function register(){\n  await axios.post('/users', {\n    username: username.value,\n    first_name: firstName.value,\n    last_name: lastName.value,\n    email: email.value,\n    password: password.value,\n    role: role.value\n  })\n  location.href='/login'\n}\n</script>\n",
  "vue_js_project/src/pages/LoginPage.vue": "# filename: vue_js_project/src/pages/LoginPage.vue\n<!-- filename: vue_js_project/src/pages/LoginPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class="max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow">\n      <h1 class="text-xl font-bold mb-4">Login</h1>\n      <form @submit.prevent="login">\n        <input\n          v-model="username"\n          placeholder="Username or Email"\n          class="w-full mb-2 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="username"\n        />\n        <input\n          v-model="password"\n          type="password"\n          placeholder="Password"\n          class="w-full mb-4 p-2 border rounded bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600"\n          autocomplete="current-password"\n        />\n        <button type="submit" class="bg-primary text-white w-full p-2 rounded">\n          Login\n        </button>\n      </form>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport axios, { setAuthToken } from '../plugins/axios.js'; // Import setAuthToken\nimport DefaultLayout from '../layouts/DefaultLayout.vue';\n\nconst store = useStore();\nconst username = ref('');\nconst password = ref('');\n\nasync function login() {\n  try {\n    const res = await axios.post('/auth/login', { username: username.value, password: password.value });\n    const token = res.data.access_token;\n\n    // Use setAuthToken to store the token and set Axios header\n    setAuthToken(token);\n\n    const tokenData = parseJwt(token);\n    store.commit('setAuth', { token, role: tokenData.role });\n\n    redirectByRole();\n  } catch (err) {\n    console.error('Login failed:', err);\n  }\n}\n\nfunction parseJwt(token) {\n  const base64Url = token.split('.')[1];\n  return JSON.parse(decodeURIComponent(atob(base64Url).split('').map(c => {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join('')));\n}\n\nfunction redirectByRole() {\n  if (store.state.role === 'teacher') location.href = '/teacher';\n  else if (store.state.role === 'parent' || store.state.role === 'class_rep') location.href = '/parent';\n  else if (store.state.role === 'admin') location.href = '/admin';\n}\n</script>\n",
  "vue_js_project/src/pages/DashboardTeacher.vue": "# filename: vue_js_project/src/pages/DashboardTeacher.vue\n<!-- filename: vue_js_project/src/pages/DashboardTeacher.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Teacher Dashboard</h1>\n    <p>Welcome, Teacher. Create and manage announcements for your classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n",
  "vue_js_project/src/pages/DashboardAdmin.vue": "# filename: vue_js_project/src/pages/DashboardAdmin.vue\n<!-- filename: vue_js_project/src/pages/DashboardAdmin.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Admin Dashboard</h1>\n    <p>Manage users, roles, and classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n",
  "vue_js_project/src/pages/DashboardParent.vue": "# filename: vue_js_project/src/pages/DashboardParent.vue\n<!-- filename: vue_js_project/src/pages/DashboardParent.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class="text-2xl font-bold mb-4">Parent Dashboard</h1>\n    <p>View announcements for your children’s classes.</p>\n\n    <!-- Add Child Form -->\n    <div class="mt-8 p-4 border rounded bg-white dark:bg-gray-800">\n      <h2 class="text-xl font-bold mb-4">Add a Child</h2>\n      <div class="mb-2">\n        <input v-model="firstName" placeholder="Child's First Name" class="w-full p-2 border rounded mb-2" />\n        <input v-model="lastName" placeholder="Child's Last Name" class="w-full p-2 border rounded mb-2" />\n        \n        <select v-model="selectedClassId" class="w-full p-2 border rounded mb-4">\n          <option disabled value="">Select a class</option>\n          <option v-for="cls in classes" :key="cls.id" :value="cls.id">\n            {{ cls.name }}\n          </option>\n        </select>\n        \n        <button @click="addChild" class="bg-primary text-white px-4 py-2 rounded">\n          Add Child\n        </button>\n      </div>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport DefaultLayout from '../layouts/DefaultLayout.vue';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\nconst firstName = ref('');\nconst lastName = ref('');\nconst selectedClassId = ref('');\nconst classes = ref([]);\n\nonMounted(async () => {\n  try {\n    console.log("Fetching classes...");\n    const res = await axios.get('/classes');\n    console.log("Classes fetched:", res.data);\n    classes.value = res.data;\n  } catch (err) {\n    console.error("Error fetching classes:", err);\n  }\n});\n\nasync function addChild() {\n  try {\n    console.log("Attempting to fetch current user...");\n    console.log("Authorization token:", store.state.token);\n\n    const me = await axios.get('/users/me', {\n      headers: { Authorization: `Bearer ${store.state.token}` }\n    });\n\n    console.log("Current user data:", me.data);\n\n    console.log("Adding child with details:", {\n      parent_id: me.data.id,\n      first_name: firstName.value,\n      last_name: lastName.value,\n      class_id: selectedClassId.value\n    });\n\n    const res = await axios.post(\n      '/children',\n      {\n        parent_id: me.data.id,\n        first_name: firstName.value,\n        last_name: lastName.value,\n        class_id: selectedClassId.value\n      },\n      {\n        headers: { Authorization: `Bearer ${store.state.token}` }\n      }\n    );\n\n    console.log("Child added successfully:", res.data);\n\n    // Clear form\n    firstName.value = '';\n    lastName.value = '';\n    selectedClassId.value = '';\n  } catch (err) {\n    console.error("Error adding child:", err);\n  }\n}\n</script>\n",
  "vue_js_project/src/store/index.js": "# filename: vue_js_project/src/store/index.js\n// filename: vue_js_project/src/store/index.js\nimport { createStore } from 'vuex'\n\nconst store = createStore({\n  state: {\n    token: localStorage.getItem('accessToken') || null, // Rehydrate token from localStorage\n    role: null,\n    darkMode: false,\n  },\n  mutations: {\n    setAuth(state, { token, role }) {\n      state.token = token\n      state.role = role\n      // Save token to localStorage for persistence\n      localStorage.setItem('accessToken', token)\n    },\n    clearAuth(state) {\n      state.token = null\n      state.role = null\n      // Remove token from localStorage\n      localStorage.removeItem('accessToken')\n    },\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode\n    }\n  },\n  actions: {\n    login({ commit }, payload) {\n      commit('setAuth', payload)\n    },\n    logout({ commit }) {\n      commit('clearAuth')\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.token,\n    getUserRole: state => state.role,\n  }\n})\n\nexport default store\n",
}
