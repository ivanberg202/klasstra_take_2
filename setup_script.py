# filename: setup_script.py
import os
import sys
import subprocess

# The following dictionary includes all previously provided files (backend and frontend) from the PRD solution.
# Each file's content is escaped into a single line string with "\n" representing newlines.
# The keys are the file paths starting from the project root directories (python_project and vue_js_project),
# without the "klasstra_take_2/" prefix.

project_structure = {
  "python_project/app/core/config.py":
    "# filename: app/core/config.py\nimport os\n\nclass Settings:\n    PROJECT_NAME: str = \"Klasstra\"\n    SQLALCHEMY_DATABASE_URI: str = os.getenv(\"DATABASE_URL\", \"postgresql+psycopg2://YOUR_DB_CONNECTION_STRING\")\n    JWT_SECRET: str = os.getenv(\"JWT_SECRET\", \"supersecret\")\n    JWT_ALGORITHM: str = \"HS256\"\n    RATE_LIMIT: int = 5 # announcements per minute per user\n\nsettings = Settings()\n",
  "python_project/app/core/database.py":
    "# filename: app/core/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\n\nengine = create_engine(settings.SQLALCHEMY_DATABASE_URI, pool_pre_ping=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n",
  "python_project/app/core/security.py":
    "# filename: app/core/security.py\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain: str, hashed: str) -> bool:\n    return pwd_context.verify(plain, hashed)\n",
  "python_project/app/core/auth.py":
    "# filename: app/core/auth.py\nfrom datetime import datetime, timedelta\nfrom jose import jwt\nfrom app.core.config import settings\n\ndef create_access_token(data: dict, expires_delta: int = 3600):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(seconds=expires_delta)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)\n",
  "python_project/app/models/user.py":
    "# filename: app/models/user.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\n# Roles: \"teacher\", \"parent\", \"admin\", \"class_rep\"\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True, nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)\n    password_hash = Column(String, nullable=False)\n    role = Column(String, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/models/class_.py":
    "# filename: app/models/class_.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Class(Base):\n    __tablename__ = \"classes\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/models/announcement.py":
    "# filename: app/models/announcement.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Announcement(Base):\n    __tablename__ = \"announcements\"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n    created_by = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    last_updated_by = Column(Integer, ForeignKey(\"users.id\"), nullable=True)\n    recipient_type = Column(String, nullable=False) # \"class\" or \"parent\"\n    recipient_id = Column(Integer, nullable=False)   # class_id or user_id\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/models/child.py":
    "# filename: app/models/child.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Child(Base):\n    __tablename__ = \"children\"\n    id = Column(Integer, primary_key=True, index=True)\n    parent_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    class_name = Column(String, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
  "python_project/app/models/audit_log.py":
    "# filename: app/models/audit_log.py\nfrom sqlalchemy import Column, Integer, String, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass AuditLog(Base):\n    __tablename__ = \"audit_logs\"\n    id = Column(Integer, primary_key=True, index=True)\n    entity_type = Column(String, nullable=False)\n    entity_id = Column(Integer, nullable=False)\n    action = Column(String, nullable=False)\n    performed_by = Column(Integer, ForeignKey(\"users.id\"))\n    timestamp = Column(DateTime(timezone=True), server_default=func.now())\n",
  "python_project/app/schemas/common.py":
    "# filename: app/schemas/common.py\nfrom pydantic import BaseModel\nfrom datetime import datetime\n\nclass Timestamped(BaseModel):\n    created_at: datetime\n    updated_at: datetime | None\n    class Config:\n        orm_mode = True\n",
  "python_project/app/schemas/user.py":
    "# filename: app/schemas/user.py\nfrom pydantic import BaseModel, EmailStr, constr\nfrom app.schemas.common import Timestamped\n\nclass UserBase(BaseModel):\n    username: str\n    first_name: str\n    last_name: str\n    email: EmailStr\n    role: str\n\nclass UserCreate(UserBase):\n    password: constr(min_length=8)\n\nclass UserOut(UserBase, Timestamped):\n    id: int\n",
  "python_project/app/schemas/class_.py":
    "# filename: app/schemas/class_.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ClassBase(BaseModel):\n    name: str\n\nclass ClassOut(ClassBase, Timestamped):\n    id: int\n",
  "python_project/app/schemas/announcement.py":
    "# filename: app/schemas/announcement.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass AnnouncementBase(BaseModel):\n    title: str\n    body: str\n    recipient_type: str\n    recipient_id: int\n\nclass AnnouncementCreate(AnnouncementBase):\n    pass\n\nclass AnnouncementOut(AnnouncementBase, Timestamped):\n    id: int\n    created_by: int\n    last_updated_by: int | None\n",
  "python_project/app/schemas/child.py":
    "# filename: app/schemas/child.py\nfrom pydantic import BaseModel\nfrom app.schemas.common import Timestamped\n\nclass ChildBase(BaseModel):\n    parent_id: int\n    first_name: str\n    last_name: str\n    class_name: str\n\nclass ChildOut(ChildBase, Timestamped):\n    id: int\n",
  "python_project/app/schemas/auth.py":
    "# filename: app/schemas/auth.py\nfrom pydantic import BaseModel\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n\nclass LoginData(BaseModel):\n    username: str\n    password: str\n",
  "python_project/app/utils/roles.py":
    "# filename: app/utils/roles.py\ndef can_create_announcements(role: str) -> bool:\n    return role in [\"teacher\", \"class_rep\", \"admin\"]\n\ndef can_manage_users(role: str) -> bool:\n    return role == \"admin\"\n\ndef is_parent(role: str) -> bool:\n    return role in [\"parent\", \"class_rep\"]\n",
  "python_project/app/utils/rate_limit.py":
    "# filename: app/utils/rate_limit.py\nfrom collections import defaultdict\nfrom time import time\nfrom app.core.config import settings\n\nrates = defaultdict(list)\n\ndef check_rate_limit(user_id: int) -> bool:\n    now = time()\n    rates[user_id] = [t for t in rates[user_id] if t > now - 60]\n    if len(rates[user_id]) >= settings.RATE_LIMIT:\n        return False\n    rates[user_id].append(now)\n    return True\n",
  "python_project/app/routers/auth.py":
    "# filename: app/routers/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.schemas.auth import LoginData, Token\nfrom app.core.database import get_db\nfrom app.core.security import verify_password\nfrom app.core.auth import create_access_token\nfrom app.models.user import User\n\nrouter = APIRouter(prefix=\"/auth\", tags=[\"auth\"])\n\n@router.post(\"/login\", response_model=Token)\ndef login(data: LoginData, db: Session = Depends(get_db)):\n    user = db.query(User).filter((User.username==data.username)|(User.email==data.username)).first()\n    if not user or not verify_password(data.password, user.password_hash):\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n    token = create_access_token({\"sub\": user.username, \"role\": user.role, \"user_id\": user.id})\n    return {\"access_token\": token}\n",
  "python_project/app/routers/users.py":
    "# filename: app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.core.security import hash_password\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"auth/login\")\n\n@router.post(\"/\", response_model=UserOut)\ndef create_user(user_in: UserCreate, db: Session = Depends(get_db)):\n    if db.query(User).filter((User.username==user_in.username)|(User.email==user_in.email)).first():\n        raise HTTPException(status_code=400, detail=\"User exists\")\n    user = User(\n        username=user_in.username,\n        first_name=user_in.first_name,\n        last_name=user_in.last_name,\n        email=user_in.email,\n        password_hash=hash_password(user_in.password),\n        role=user_in.role\n    )\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n\n@router.get(\"/me\", response_model=UserOut)\ndef get_me(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    username = payload.get(\"sub\")\n    user = db.query(User).filter(User.username==username).first()\n    if not user:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n    return user\n",
  "python_project/app/routers/classes.py":
    "# filename: app/routers/classes.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.models.class_ import Class\nfrom app.schemas.class_ import ClassBase, ClassOut\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix=\"/classes\", tags=[\"classes\"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"auth/login\")\n\n@router.post(\"/\", response_model=ClassOut)\ndef create_class(c: ClassBase, token: str=Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get(\"role\")):\n        raise HTTPException(status_code=403, detail=\"Not allowed\")\n    cls = Class(name=c.name)\n    db.add(cls)\n    db.commit()\n    db.refresh(cls)\n    return cls\n",
  "python_project/app/routers/announcements.py":
    "# filename: app/routers/announcements.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.announcement import AnnouncementCreate, AnnouncementOut\nfrom app.models.announcement import Announcement\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import can_create_announcements\nfrom app.utils.rate_limit import check_rate_limit\n\nrouter = APIRouter(prefix=\"/announcements\", tags=[\"announcements\"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"auth/login\")\n\n@router.post(\"/\", response_model=AnnouncementOut)\ndef create_announcement(a: AnnouncementCreate, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    user_id = payload.get(\"user_id\")\n    role = payload.get(\"role\")\n    if not can_create_announcements(role):\n        raise HTTPException(status_code=403, detail=\"Not allowed\")\n    if not check_rate_limit(user_id):\n        raise HTTPException(status_code=429, detail=\"Rate limit exceeded\")\n    ann = Announcement(\n        title=a.title, body=a.body, created_by=user_id, last_updated_by=user_id,\n        recipient_type=a.recipient_type, recipient_id=a.recipient_id)\n    db.add(ann)\n    db.commit()\n    db.refresh(ann)\n    return ann\n",
  "python_project/app/routers/children.py":
    "# filename: app/routers/children.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom app.schemas.child import ChildBase, ChildOut\nfrom app.models.child import Child\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.utils.roles import is_parent\n\nrouter = APIRouter(prefix=\"/children\", tags=[\"children\"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"auth/login\")\n\n@router.post(\"/\", response_model=ChildOut)\ndef add_child(c: ChildBase, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not is_parent(payload.get(\"role\")) or payload.get(\"user_id\") != c.parent_id:\n        raise HTTPException(status_code=403, detail=\"Not allowed\")\n    ch = Child(**c.dict())\n    db.add(ch)\n    db.commit()\n    db.refresh(ch)\n    return ch\n",
  "python_project/app/routers/admin.py":
    "# filename: app/routers/admin.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.core.database import get_db\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt\nfrom app.core.config import settings\nfrom app.models.user import User\nfrom app.utils.roles import can_manage_users\n\nrouter = APIRouter(prefix=\"/admin\", tags=[\"admin\"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"auth/login\")\n\n@router.put(\"/user/{user_id}/class_rep\")\ndef make_class_rep(user_id: int, token: str=Depends(oauth2_scheme), db: Session=Depends(get_db)):\n    payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])\n    if not can_manage_users(payload.get(\"role\")):\n        raise HTTPException(status_code=403, detail=\"Not allowed\")\n    user = db.query(User).filter(User.id==user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    user.role = \"class_rep\"\n    db.commit()\n    return {\"detail\": \"User promoted to class_rep\"}\n",
  "python_project/app/main.py":
    "# filename: app/main.py\nfrom fastapi import FastAPI\nfrom app.routers import auth, users, classes, announcements, children, admin\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI(title=\"Klasstra\")\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.include_router(auth.router)\napp.include_router(users.router)\napp.include_router(classes.router)\napp.include_router(announcements.router)\napp.include_router(children.router)\napp.include_router(admin.router)\n",
  "vue_js_project/postcss.config.js":
    "// filename: vue_js_project/postcss.config.js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n",
  "vue_js_project/tailwind.config.js":
    "// filename: vue_js_project/tailwind.config.js\nmodule.exports = {\n  content: [\"./index.html\",\"./src/**/*.{vue,js,ts,jsx,tsx}\"],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: '#2563eb',\n        secondary: '#9333ea'\n      }\n    },\n  },\n  plugins: [],\n}\n",
  "vue_js_project/src/main.js":
    "// filename: vue_js_project/src/main.js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport './assets/tailwind.css'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n  .use(router)\n  .use(store)\n  .mount('#app')\n",
  "vue_js_project/src/assets/tailwind.css":
    "/* filename: vue_js_project/src/assets/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Additional custom styles can go here. */\n",
  "vue_js_project/src/store/index.js":
    "// filename: vue_js_project/src/store/index.js\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    token: null,\n    role: null,\n    darkMode: false,\n  },\n  mutations: {\n    setAuth(state, { token, role }) {\n      state.token = token\n      state.role = role\n    },\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode\n    }\n  },\n  actions: {},\n  getters: {}\n})\n",
  "vue_js_project/src/router.js":
    "// filename: vue_js_project/src/router.js\nimport { createRouter, createWebHistory } from 'vue-router'\nimport LoginPage from './pages/LoginPage.vue'\nimport RegisterPage from './pages/RegisterPage.vue'\nimport DashboardTeacher from './pages/DashboardTeacher.vue'\nimport DashboardParent from './pages/DashboardParent.vue'\nimport DashboardAdmin from './pages/DashboardAdmin.vue'\n\nconst routes = [\n  { path: '/', redirect: '/login' },\n  { path: '/login', component: LoginPage },\n  { path: '/register', component: RegisterPage },\n  { path: '/teacher', component: DashboardTeacher },\n  { path: '/parent', component: DashboardParent },\n  { path: '/admin', component: DashboardAdmin }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nexport default router\n",
  "vue_js_project/src/App.vue":
    "<!-- filename: vue_js_project/src/App.vue -->\n<template>\n  <div :class=\"{ 'dark': $store.state.darkMode }\" class=\"bg-white dark:bg-gray-900 min-h-screen text-gray-900 dark:text-white\">\n    <Navbar />\n    <router-view />\n  </div>\n</template>\n\n<script setup>\nimport Navbar from './components/Navbar.vue'\n</script>\n\n<style scoped>\n</style>\n",
  "vue_js_project/src/components/Navbar.vue":
    "<!-- filename: vue_js_project/src/components/Navbar.vue -->\n<template>\n  <nav class=\"p-4 flex justify-between items-center bg-primary dark:bg-gray-800\">\n    <div class=\"text-white font-bold\">Klasstra</div>\n    <div class=\"flex items-center space-x-4\">\n      <ThemeToggle />\n      <button @click=\"logout\" class=\"bg-white text-black px-3 py-1 rounded\">Logout</button>\n    </div>\n  </nav>\n</template>\n\n<script setup>\nimport { useStore } from 'vuex'\nimport ThemeToggle from './ThemeToggle.vue'\nconst store = useStore()\n\nfunction logout() {\n  store.commit('setAuth', {token:null, role:null})\n  location.href = '/login'\n}\n</script>\n",
  "vue_js_project/src/components/ThemeToggle.vue":
    "<!-- filename: vue_js_project/src/components/ThemeToggle.vue -->\n<template>\n  <button @click=\"toggle\" class=\"px-3 py-1 bg-secondary text-white rounded\">\n    {{ isDark ? 'Light Mode' : 'Dark Mode' }}\n  </button>\n</template>\n\n<script setup>\nimport { useStore } from 'vuex'\nconst store = useStore()\nconst isDark = computed(() => store.state.darkMode)\nfunction toggle(){ store.commit('toggleDarkMode') }\n</script>\n",
  "vue_js_project/src/components/AnnouncementCard.vue":
    "<!-- filename: vue_js_project/src/components/AnnouncementCard.vue -->\n<template>\n  <div class=\"border rounded p-4 shadow mb-4 bg-white dark:bg-gray-800 dark:text-white\">\n    <h2 class=\"font-bold text-lg\">{{ title }}</h2>\n    <p class=\"mt-2\">{{ body }}</p>\n    <small class=\"text-gray-500 dark:text-gray-400\">By: {{ createdBy }} • {{ createdAt }}</small>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps } from 'vue'\ndefineProps({\n  title: String,\n  body: String,\n  createdBy: String,\n  createdAt: String\n})\n</script>\n",
  "vue_js_project/src/layouts/DefaultLayout.vue":
    "<!-- filename: vue_js_project/src/layouts/DefaultLayout.vue -->\n<template>\n  <div class=\"container mx-auto p-4\">\n    <slot />\n  </div>\n</template>\n\n<script setup>\n</script>\n",
  "vue_js_project/src/pages/LoginPage.vue":
    "<!-- filename: vue_js_project/src/pages/LoginPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class=\"max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow\">\n      <h1 class=\"text-xl font-bold mb-4\">Login</h1>\n      <input v-model=\"username\" placeholder=\"Username or Email\" class=\"w-full mb-2 p-2 border rounded\"/>\n      <input v-model=\"password\" type=\"password\" placeholder=\"Password\" class=\"w-full mb-4 p-2 border rounded\"/>\n      <button @click=\"login\" class=\"bg-primary text-white w-full p-2 rounded\">Login</button>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport { useStore } from 'vuex'\nimport axios from 'axios'\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\nconst store = useStore()\nconst username = ref('')\nconst password = ref('')\n\nasync function login(){\n  const res = await axios.post('/auth/login', { username: username.value, password: password.value })\n  store.commit('setAuth', { token: res.data.access_token, role: parseJwt(res.data.access_token).role })\n  redirectByRole()\n}\n\nfunction parseJwt (token) {\n  const base64Url = token.split('.')[1]\n  return JSON.parse(decodeURIComponent(atob(base64Url).split('').map(function(c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n  }).join('')))\n}\n\nfunction redirectByRole(){\n  if(store.state.role === 'teacher') location.href='/teacher'\n  else if(store.state.role === 'parent' || store.state.role === 'class_rep') location.href='/parent'\n  else if(store.state.role === 'admin') location.href='/admin'\n}\n</script>\n",
  "vue_js_project/src/pages/RegisterPage.vue":
    "<!-- filename: vue_js_project/src/pages/RegisterPage.vue -->\n<template>\n  <DefaultLayout>\n    <div class=\"max-w-md mx-auto bg-white dark:bg-gray-800 p-6 rounded shadow\">\n      <h1 class=\"text-xl font-bold mb-4\">Register</h1>\n      <input v-model=\"username\" placeholder=\"Username\" class=\"w-full mb-2 p-2 border rounded\"/>\n      <input v-model=\"firstName\" placeholder=\"First Name\" class=\"w-full mb-2 p-2 border rounded\"/>\n      <input v-model=\"lastName\" placeholder=\"Last Name\" class=\"w-full mb-2 p-2 border rounded\"/>\n      <input v-model=\"email\" placeholder=\"Email\" class=\"w-full mb-2 p-2 border rounded\"/>\n      <input v-model=\"password\" type=\"password\" placeholder=\"Password\" class=\"w-full mb-2 p-2 border rounded\"/>\n      <select v-model=\"role\" class=\"w-full mb-4 p-2 border rounded\">\n        <option value=\"teacher\">Teacher</option>\n        <option value=\"parent\">Parent</option>\n      </select>\n      <button @click=\"register\" class=\"bg-primary text-white w-full p-2 rounded\">Register</button>\n    </div>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport axios from 'axios'\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\nconst username = ref('')\nconst firstName = ref('')\nconst lastName = ref('')\nconst email = ref('')\nconst password = ref('')\nconst role = ref('parent')\n\nasync function register(){\n  await axios.post('/users', {\n    username: username.value,\n    first_name: firstName.value,\n    last_name: lastName.value,\n    email: email.value,\n    password: password.value,\n    role: role.value\n  })\n  location.href='/login'\n}\n</script>\n",
  "vue_js_project/src/pages/DashboardTeacher.vue":
    "<!-- filename: vue_js_project/src/pages/DashboardTeacher.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class=\"text-2xl font-bold mb-4\">Teacher Dashboard</h1>\n    <p>Welcome, Teacher. Create and manage announcements for your classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n",
  "vue_js_project/src/pages/DashboardParent.vue":
    "<!-- filename: vue_js_project/src/pages/DashboardParent.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class=\"text-2xl font-bold mb-4\">Parent Dashboard</h1>\n    <p>View announcements for your children’s classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n",
  "vue_js_project/src/pages/DashboardAdmin.vue":
    "<!-- filename: vue_js_project/src/pages/DashboardAdmin.vue -->\n<template>\n  <DefaultLayout>\n    <h1 class=\"text-2xl font-bold mb-4\">Admin Dashboard</h1>\n    <p>Manage users, roles, and classes.</p>\n  </DefaultLayout>\n</template>\n\n<script setup>\nimport DefaultLayout from '../layouts/DefaultLayout.vue'\n</script>\n",
  "vue_js_project/public/index.html":
    "<!-- filename: vue_js_project/public/index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Klasstra</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\n</html>\n"
}

def create_files():
    for path, content in project_structure.items():
        dir_name = os.path.dirname(path)
        if not os.path.exists(dir_name):
            os.makedirs(dir_name, exist_ok=True)
        with open(path, 'w', encoding='utf-8') as f:
            f.write(content)
    print("Directory structure and files created/overwritten successfully.")

def run_pip_install():
    python_dir = "python_project"
    req_file = os.path.join(python_dir, "requirements.txt")
    if os.path.exists(req_file):
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], cwd=python_dir)
        print("Python dependencies installed successfully.")
    else:
        print("requirements.txt not found in python_project.")

def run_npm_install():
    vue_dir = "vue_js_project"
    pkg_file = os.path.join(vue_dir, "package.json")
    if os.path.exists(pkg_file):
        subprocess.check_call(["npm", "install"], cwd=vue_dir)
        print("NPM packages installed successfully.")
    else:
        print("package.json not found in vue_js_project.")

if __name__ == "__main__":
    args = sys.argv[1:]

    if not args:
        create_files()
    else:
        if "--install-python" in args:
            run_pip_install()
        if "--install-npm" in args:
            run_npm_install()
